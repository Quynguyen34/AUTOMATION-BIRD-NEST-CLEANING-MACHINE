
PROJECT_MINHAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004478  08004478  00005478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004558  08004558  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004558  08004558  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004558  08004558  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004560  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000125c  20000010  08004570  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000126c  08004570  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001252e  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003146  00000000  00000000  00018567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc2  00000000  00000000  0001c870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aeb7  00000000  00000000  0001d632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016721  00000000  00000000  000384e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a80  00000000  00000000  0004ec0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e268a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000485c  00000000  00000000  000e26d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e6f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004460 	.word	0x08004460

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004460 	.word	0x08004460

08000150 <Accel_Stepper_SetPin>:
 * dir_port : GPIO port of direction pin
 * dir_pin : gpio pin number of direction pin
 */
void Accel_Stepper_SetPin(Acceleration_t* Accel_stepper, GPIO_TypeDef* step_port,
		uint16_t step_pin, GPIO_TypeDef* dir_port, uint16_t dir_pin)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	603b      	str	r3, [r7, #0]
 800015c:	4613      	mov	r3, r2
 800015e:	80fb      	strh	r3, [r7, #6]
	Accel_stepper->Step_Port = step_port;
 8000160:	68fb      	ldr	r3, [r7, #12]
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	629a      	str	r2, [r3, #40]	@ 0x28
	Accel_stepper->Step_Pin = step_pin;
 8000166:	68fb      	ldr	r3, [r7, #12]
 8000168:	88fa      	ldrh	r2, [r7, #6]
 800016a:	861a      	strh	r2, [r3, #48]	@ 0x30
	Accel_stepper->Dir_Pin = dir_pin;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	8b3a      	ldrh	r2, [r7, #24]
 8000170:	865a      	strh	r2, [r3, #50]	@ 0x32
	Accel_stepper->Dir_Port = dir_port;
 8000172:	68fb      	ldr	r3, [r7, #12]
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000178:	bf00      	nop
 800017a:	3714      	adds	r7, #20
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr

08000182 <Accel_Stepper_SetTimer>:
/*
 * Set Timer for each motor
 * timer : pointer to timer typedef(Which timer is use for control speed)
 */
void Accel_Stepper_SetTimer(Acceleration_t *Accel_stepper, TIM_HandleTypeDef* timer){
 8000182:	b480      	push	{r7}
 8000184:	b083      	sub	sp, #12
 8000186:	af00      	add	r7, sp, #0
 8000188:	6078      	str	r0, [r7, #4]
 800018a:	6039      	str	r1, [r7, #0]
	Accel_stepper->htim = timer;
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	683a      	ldr	r2, [r7, #0]
 8000190:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <initializeCNC_pos>:

CNC_pos_t CNC_pos;
Inv_CNC_t CNC;

void initializeCNC_pos(CNC_pos_t *cnc)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	//switch
	cnc->Lsw1 = 0;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
	cnc->Lsw2 = 0;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	2200      	movs	r2, #0
 80001ae:	705a      	strb	r2, [r3, #1]
	cnc->Lsw3 = 0;
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	2200      	movs	r2, #0
 80001b4:	709a      	strb	r2, [r3, #2]
	cnc->Lsw4 = 0;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	70da      	strb	r2, [r3, #3]
	cnc->Lsw5 = 0;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	2200      	movs	r2, #0
 80001c0:	711a      	strb	r2, [r3, #4]
	cnc->Lsw6 = 0;
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	2200      	movs	r2, #0
 80001c6:	715a      	strb	r2, [r3, #5]
	//Set value acceleration - deceleration - speed
	cnc->accel1 = 0;
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2200      	movs	r2, #0
 80001cc:	84da      	strh	r2, [r3, #38]	@ 0x26
	cnc->accel2 = 0;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2200      	movs	r2, #0
 80001d2:	851a      	strh	r2, [r3, #40]	@ 0x28
	cnc->accel3 = 0;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
	cnc->jerk1 = 0;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2200      	movs	r2, #0
 80001de:	859a      	strh	r2, [r3, #44]	@ 0x2c
	cnc->jerk2 = 0;
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2200      	movs	r2, #0
 80001e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
	cnc->jerk3 = 0;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	861a      	strh	r2, [r3, #48]	@ 0x30
	cnc->max_speedXY = 1000;
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001f2:	865a      	strh	r2, [r3, #50]	@ 0x32
	cnc->max_speedZ = 1000;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80001fa:	869a      	strh	r2, [r3, #52]	@ 0x34
	cnc->a_maxX = 1000;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000202:	86da      	strh	r2, [r3, #54]	@ 0x36
	cnc->j_maxX = 1000;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800020a:	871a      	strh	r2, [r3, #56]	@ 0x38
	cnc->a_maxY = 1000;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000212:	875a      	strh	r2, [r3, #58]	@ 0x3a
	cnc->j_maxY = 1000;
 8000214:	6879      	ldr	r1, [r7, #4]
 8000216:	f04f 0200 	mov.w	r2, #0
 800021a:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <initializeCNC_pos+0xa4>)
 800021c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	cnc->a_maxZ = 1000;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000226:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	cnc->j_maxZ = 1000;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000230:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
}
 8000234:	bf00      	nop
 8000236:	370c      	adds	r7, #12
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	408f4000 	.word	0x408f4000

08000244 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000244:	b480      	push	{r7}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4a06      	ldr	r2, [pc, #24]	@ (800026c <vApplicationGetIdleTaskMemory+0x28>)
 8000254:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	4a05      	ldr	r2, [pc, #20]	@ (8000270 <vApplicationGetIdleTaskMemory+0x2c>)
 800025a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2280      	movs	r2, #128	@ 0x80
 8000260:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000262:	bf00      	nop
 8000264:	3714      	adds	r7, #20
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000158 	.word	0x20000158
 8000270:	200001ac 	.word	0x200001ac

08000274 <DelayUs_step>:
	int n1 = max(a, b);
    return max(n1, c);
}
/* Function set home */
void DelayUs_step(uint32_t us)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim1);
 800027c:	480a      	ldr	r0, [pc, #40]	@ (80002a8 <DelayUs_step+0x34>)
 800027e:	f001 fda3 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
	//(&htim7)->Instance->CNT = (0);
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000282:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <DelayUs_step+0x34>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2200      	movs	r2, #0
 8000288:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us);
 800028a:	bf00      	nop
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <DelayUs_step+0x34>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	429a      	cmp	r2, r3
 8000296:	d8f9      	bhi.n	800028c <DelayUs_step+0x18>
	HAL_TIM_Base_Stop_IT(&htim1);
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <DelayUs_step+0x34>)
 800029a:	f001 fde7 	bl	8001e6c <HAL_TIM_Base_Stop_IT>
}
 800029e:	bf00      	nop
 80002a0:	3708      	adds	r7, #8
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	200003ac 	.word	0x200003ac

080002ac <HOME>:
void HOME(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
    // Home Z axis
    HAL_GPIO_WritePin(dir_3_port, dir_3_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80002b2:	2200      	movs	r2, #0
 80002b4:	2120      	movs	r1, #32
 80002b6:	4833      	ldr	r0, [pc, #204]	@ (8000384 <HOME+0xd8>)
 80002b8:	f001 f8d3 	bl	8001462 <HAL_GPIO_WritePin>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 80002bc:	e006      	b.n	80002cc <HOME+0x20>
        HAL_GPIO_TogglePin(step_3_port, step_3_pin); // Toggle step pin to move towards home
 80002be:	2110      	movs	r1, #16
 80002c0:	4830      	ldr	r0, [pc, #192]	@ (8000384 <HOME+0xd8>)
 80002c2:	f001 f8e6 	bl	8001492 <HAL_GPIO_TogglePin>
        DelayUs_step(30); // Adjust delay as needed
 80002c6:	201e      	movs	r0, #30
 80002c8:	f7ff ffd4 	bl	8000274 <DelayUs_step>
    while (HAL_GPIO_ReadPin(moveZsub_port, moveZsub_pin) != CNC_pos.Lsw6) {
 80002cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002d0:	482d      	ldr	r0, [pc, #180]	@ (8000388 <HOME+0xdc>)
 80002d2:	f001 f8af 	bl	8001434 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	461a      	mov	r2, r3
 80002da:	4b2c      	ldr	r3, [pc, #176]	@ (800038c <HOME+0xe0>)
 80002dc:	795b      	ldrb	r3, [r3, #5]
 80002de:	429a      	cmp	r2, r3
 80002e0:	d1ed      	bne.n	80002be <HOME+0x12>
    }
    // Home X axis
    HAL_GPIO_WritePin(step_1_port, dir_1_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80002e2:	2200      	movs	r2, #0
 80002e4:	2102      	movs	r1, #2
 80002e6:	4827      	ldr	r0, [pc, #156]	@ (8000384 <HOME+0xd8>)
 80002e8:	f001 f8bb 	bl	8001462 <HAL_GPIO_WritePin>
    bool isXHome = false;
 80002ec:	2300      	movs	r3, #0
 80002ee:	71fb      	strb	r3, [r7, #7]

    // Home Y axis
    HAL_GPIO_WritePin(dir_2_port, dir_2_pin, GPIO_PIN_RESET); // Set direction to move towards home
 80002f0:	2200      	movs	r2, #0
 80002f2:	2108      	movs	r1, #8
 80002f4:	4823      	ldr	r0, [pc, #140]	@ (8000384 <HOME+0xd8>)
 80002f6:	f001 f8b4 	bl	8001462 <HAL_GPIO_WritePin>
    bool isYHome = false;
 80002fa:	2300      	movs	r3, #0
 80002fc:	71bb      	strb	r3, [r7, #6]

    while (!(isXHome && isYHome)) {
 80002fe:	e030      	b.n	8000362 <HOME+0xb6>
        if (!isXHome && (HAL_GPIO_ReadPin(moveXsub_port, moveXsub_pin) != CNC_pos.Lsw2)) {
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f083 0301 	eor.w	r3, r3, #1
 8000306:	b2db      	uxtb	r3, r3
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00e      	beq.n	800032a <HOME+0x7e>
 800030c:	2180      	movs	r1, #128	@ 0x80
 800030e:	481d      	ldr	r0, [pc, #116]	@ (8000384 <HOME+0xd8>)
 8000310:	f001 f890 	bl	8001434 <HAL_GPIO_ReadPin>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	4b1c      	ldr	r3, [pc, #112]	@ (800038c <HOME+0xe0>)
 800031a:	785b      	ldrb	r3, [r3, #1]
 800031c:	429a      	cmp	r2, r3
 800031e:	d004      	beq.n	800032a <HOME+0x7e>
            HAL_GPIO_TogglePin(step_1_port, step_1_pin); // Toggle step pin to move towards home
 8000320:	2101      	movs	r1, #1
 8000322:	4818      	ldr	r0, [pc, #96]	@ (8000384 <HOME+0xd8>)
 8000324:	f001 f8b5 	bl	8001492 <HAL_GPIO_TogglePin>
 8000328:	e001      	b.n	800032e <HOME+0x82>
        } else {
            isXHome = true;
 800032a:	2301      	movs	r3, #1
 800032c:	71fb      	strb	r3, [r7, #7]
        }

        if (!isYHome && (HAL_GPIO_ReadPin(moveYsub_port, moveYsub_pin) != CNC_pos.Lsw4)) {
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	f083 0301 	eor.w	r3, r3, #1
 8000334:	b2db      	uxtb	r3, r3
 8000336:	2b00      	cmp	r3, #0
 8000338:	d00e      	beq.n	8000358 <HOME+0xac>
 800033a:	2102      	movs	r1, #2
 800033c:	4812      	ldr	r0, [pc, #72]	@ (8000388 <HOME+0xdc>)
 800033e:	f001 f879 	bl	8001434 <HAL_GPIO_ReadPin>
 8000342:	4603      	mov	r3, r0
 8000344:	461a      	mov	r2, r3
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <HOME+0xe0>)
 8000348:	78db      	ldrb	r3, [r3, #3]
 800034a:	429a      	cmp	r2, r3
 800034c:	d004      	beq.n	8000358 <HOME+0xac>
            HAL_GPIO_TogglePin(step_2_port, step_2_pin); // Toggle step pin to move towards home
 800034e:	2104      	movs	r1, #4
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <HOME+0xd8>)
 8000352:	f001 f89e 	bl	8001492 <HAL_GPIO_TogglePin>
 8000356:	e001      	b.n	800035c <HOME+0xb0>
        } else {
            isYHome = true;
 8000358:	2301      	movs	r3, #1
 800035a:	71bb      	strb	r3, [r7, #6]
        }
        DelayUs_step(30); // Adjust delay as needed
 800035c:	201e      	movs	r0, #30
 800035e:	f7ff ff89 	bl	8000274 <DelayUs_step>
    while (!(isXHome && isYHome)) {
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	f083 0301 	eor.w	r3, r3, #1
 8000368:	b2db      	uxtb	r3, r3
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1c8      	bne.n	8000300 <HOME+0x54>
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	f083 0301 	eor.w	r3, r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1c2      	bne.n	8000300 <HOME+0x54>
    }
}
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00
 800038c:	200000d8 	.word	0x200000d8

08000390 <MX_FREERTOS_Unit>:
}


/* USER CODE BEGIN Application */
void MX_FREERTOS_Unit(void)
{
 8000390:	b5b0      	push	{r4, r5, r7, lr}
 8000392:	b09c      	sub	sp, #112	@ 0x70
 8000394:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of startMainSystem */
	osThreadDef(startMainSystem, StartMainSystem, osPriorityNormal, 0, 128);
 8000396:	4b27      	ldr	r3, [pc, #156]	@ (8000434 <MX_FREERTOS_Unit+0xa4>)
 8000398:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800039c:	461d      	mov	r5, r3
 800039e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	startMainSystemHandle = osThreadCreate(osThread(startMainSystem), NULL);
 80003aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f002 fe31 	bl	8003018 <osThreadCreate>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000438 <MX_FREERTOS_Unit+0xa8>)
 80003ba:	6013      	str	r3, [r2, #0]

	/* definition and creation of startUART_RX */
	osThreadDef(startUART_RX, StartUART_RX, osPriorityLow, 0, 128);
 80003bc:	4b1f      	ldr	r3, [pc, #124]	@ (800043c <MX_FREERTOS_Unit+0xac>)
 80003be:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80003c2:	461d      	mov	r5, r3
 80003c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	startUART_RXHandle = osThreadCreate(osThread(startUART_RX), NULL);
 80003d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fe1e 	bl	8003018 <osThreadCreate>
 80003dc:	4603      	mov	r3, r0
 80003de:	4a18      	ldr	r2, [pc, #96]	@ (8000440 <MX_FREERTOS_Unit+0xb0>)
 80003e0:	6013      	str	r3, [r2, #0]

	/* definition and creation of startUART_TX */
	osThreadDef(startUART_TX, StartUART_TX, osPriorityLow, 0, 128);
 80003e2:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <MX_FREERTOS_Unit+0xb4>)
 80003e4:	f107 041c 	add.w	r4, r7, #28
 80003e8:	461d      	mov	r5, r3
 80003ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	startUART_TXHandle = osThreadCreate(osThread(startUART_TX), NULL);
 80003f6:	f107 031c 	add.w	r3, r7, #28
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f002 fe0b 	bl	8003018 <osThreadCreate>
 8000402:	4603      	mov	r3, r0
 8000404:	4a10      	ldr	r2, [pc, #64]	@ (8000448 <MX_FREERTOS_Unit+0xb8>)
 8000406:	6013      	str	r3, [r2, #0]

	/* definition and creation of startGRAB */
	osThreadDef(startGRAB, StartGRAB, osPriorityLow, 0, 128);
 8000408:	4b10      	ldr	r3, [pc, #64]	@ (800044c <MX_FREERTOS_Unit+0xbc>)
 800040a:	463c      	mov	r4, r7
 800040c:	461d      	mov	r5, r3
 800040e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000412:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	startGRABHandle = osThreadCreate(osThread(startGRAB), NULL);
 800041a:	463b      	mov	r3, r7
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f002 fdfa 	bl	8003018 <osThreadCreate>
 8000424:	4603      	mov	r3, r0
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <MX_FREERTOS_Unit+0xc0>)
 8000428:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */
}
 800042a:	bf00      	nop
 800042c:	3770      	adds	r7, #112	@ 0x70
 800042e:	46bd      	mov	sp, r7
 8000430:	bdb0      	pop	{r4, r5, r7, pc}
 8000432:	bf00      	nop
 8000434:	08004488 	.word	0x08004488
 8000438:	20000148 	.word	0x20000148
 800043c:	080044b4 	.word	0x080044b4
 8000440:	2000014c 	.word	0x2000014c
 8000444:	080044e0 	.word	0x080044e0
 8000448:	20000150 	.word	0x20000150
 800044c:	08004508 	.word	0x08004508
 8000450:	20000154 	.word	0x20000154

08000454 <StartMainSystem>:
  * @retval None
  */
/* USER CODE END Header_StartMainSystem */

void StartMainSystem(void const * argument)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af02      	add	r7, sp, #8
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HOME();
 800045c:	f7ff ff26 	bl	80002ac <HOME>
  initializeCNC_pos(&CNC_pos);
 8000460:	481b      	ldr	r0, [pc, #108]	@ (80004d0 <StartMainSystem+0x7c>)
 8000462:	f7ff fe9b 	bl	800019c <initializeCNC_pos>
  Accel_Stepper_SetPin(&Stepper1, step_1_port, step_1_pin, dir_1_port, dir_1_pin);
 8000466:	2302      	movs	r3, #2
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <StartMainSystem+0x80>)
 800046c:	2201      	movs	r2, #1
 800046e:	4919      	ldr	r1, [pc, #100]	@ (80004d4 <StartMainSystem+0x80>)
 8000470:	4819      	ldr	r0, [pc, #100]	@ (80004d8 <StartMainSystem+0x84>)
 8000472:	f7ff fe6d 	bl	8000150 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper2, step_2_port, step_2_pin, dir_2_port, dir_2_pin);
 8000476:	2308      	movs	r3, #8
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <StartMainSystem+0x80>)
 800047c:	2204      	movs	r2, #4
 800047e:	4915      	ldr	r1, [pc, #84]	@ (80004d4 <StartMainSystem+0x80>)
 8000480:	4816      	ldr	r0, [pc, #88]	@ (80004dc <StartMainSystem+0x88>)
 8000482:	f7ff fe65 	bl	8000150 <Accel_Stepper_SetPin>
  Accel_Stepper_SetPin(&Stepper3, step_3_port, step_3_pin, dir_3_port, dir_3_pin);
 8000486:	2320      	movs	r3, #32
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <StartMainSystem+0x80>)
 800048c:	2210      	movs	r2, #16
 800048e:	4911      	ldr	r1, [pc, #68]	@ (80004d4 <StartMainSystem+0x80>)
 8000490:	4813      	ldr	r0, [pc, #76]	@ (80004e0 <StartMainSystem+0x8c>)
 8000492:	f7ff fe5d 	bl	8000150 <Accel_Stepper_SetPin>

  Accel_Stepper_SetTimer(&Stepper1, &htim2);
 8000496:	4913      	ldr	r1, [pc, #76]	@ (80004e4 <StartMainSystem+0x90>)
 8000498:	480f      	ldr	r0, [pc, #60]	@ (80004d8 <StartMainSystem+0x84>)
 800049a:	f7ff fe72 	bl	8000182 <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper2, &htim3);
 800049e:	4912      	ldr	r1, [pc, #72]	@ (80004e8 <StartMainSystem+0x94>)
 80004a0:	480e      	ldr	r0, [pc, #56]	@ (80004dc <StartMainSystem+0x88>)
 80004a2:	f7ff fe6e 	bl	8000182 <Accel_Stepper_SetTimer>
  Accel_Stepper_SetTimer(&Stepper3, &htim4);
 80004a6:	4911      	ldr	r1, [pc, #68]	@ (80004ec <StartMainSystem+0x98>)
 80004a8:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <StartMainSystem+0x8c>)
 80004aa:	f7ff fe6a 	bl	8000182 <Accel_Stepper_SetTimer>

  CNC.pos_x = 0;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <StartMainSystem+0x9c>)
 80004b0:	f04f 0200 	mov.w	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  CNC.pos_y = 0;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <StartMainSystem+0x9c>)
 80004b8:	f04f 0200 	mov.w	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]
  CNC.pos_z = 0;
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <StartMainSystem+0x9c>)
 80004c0:	f04f 0200 	mov.w	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f002 fdf2 	bl	80030b0 <osDelay>
 80004cc:	e7fb      	b.n	80004c6 <StartMainSystem+0x72>
 80004ce:	bf00      	nop
 80004d0:	200000d8 	.word	0x200000d8
 80004d4:	40010800 	.word	0x40010800
 80004d8:	2000002c 	.word	0x2000002c
 80004dc:	20000064 	.word	0x20000064
 80004e0:	2000009c 	.word	0x2000009c
 80004e4:	200003f4 	.word	0x200003f4
 80004e8:	2000043c 	.word	0x2000043c
 80004ec:	20000484 	.word	0x20000484
 80004f0:	20000130 	.word	0x20000130

080004f4 <StartUART_RX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_RX */
void StartUART_RX(void const * argument)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_RX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f002 fdd7 	bl	80030b0 <osDelay>
 8000502:	e7fb      	b.n	80004fc <StartUART_RX+0x8>

08000504 <StartUART_TX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUART_TX */
void StartUART_TX(void const * argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUART_TX */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f002 fdcf 	bl	80030b0 <osDelay>
 8000512:	e7fb      	b.n	800050c <StartUART_TX+0x8>

08000514 <StartGRAB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGRAB */
void StartGRAB(void const * argument)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGRAB */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f002 fdc7 	bl	80030b0 <osDelay>
 8000522:	e7fb      	b.n	800051c <StartGRAB+0x8>

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000538:	4b38      	ldr	r3, [pc, #224]	@ (800061c <MX_GPIO_Init+0xf8>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a37      	ldr	r2, [pc, #220]	@ (800061c <MX_GPIO_Init+0xf8>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b35      	ldr	r3, [pc, #212]	@ (800061c <MX_GPIO_Init+0xf8>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b32      	ldr	r3, [pc, #200]	@ (800061c <MX_GPIO_Init+0xf8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a31      	ldr	r2, [pc, #196]	@ (800061c <MX_GPIO_Init+0xf8>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b2f      	ldr	r3, [pc, #188]	@ (800061c <MX_GPIO_Init+0xf8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000568:	4b2c      	ldr	r3, [pc, #176]	@ (800061c <MX_GPIO_Init+0xf8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a2b      	ldr	r2, [pc, #172]	@ (800061c <MX_GPIO_Init+0xf8>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b29      	ldr	r3, [pc, #164]	@ (800061c <MX_GPIO_Init+0xf8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0308 	and.w	r3, r3, #8
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8000580:	2200      	movs	r2, #0
 8000582:	213f      	movs	r1, #63	@ 0x3f
 8000584:	4826      	ldr	r0, [pc, #152]	@ (8000620 <MX_GPIO_Init+0xfc>)
 8000586:	f000 ff6c 	bl	8001462 <HAL_GPIO_WritePin>
                          |step_3_pin|dir_3_pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_port, led_pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000590:	4824      	ldr	r0, [pc, #144]	@ (8000624 <MX_GPIO_Init+0x100>)
 8000592:	f000 ff66 	bl	8001462 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 */
  GPIO_InitStruct.Pin = step_1_pin|dir_1_pin|step_2_pin|dir_2_pin
 8000596:	233f      	movs	r3, #63	@ 0x3f
 8000598:	613b      	str	r3, [r7, #16]
                          |step_3_pin|dir_3_pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	481c      	ldr	r0, [pc, #112]	@ (8000620 <MX_GPIO_Init+0xfc>)
 80005ae:	f000 fdbd 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = moveXplus_pin|moveXsub_pin;
 80005b2:	23c0      	movs	r3, #192	@ 0xc0
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	4816      	ldr	r0, [pc, #88]	@ (8000620 <MX_GPIO_Init+0xfc>)
 80005c6:	f000 fdb1 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 */
  GPIO_InitStruct.Pin = moveYplus_pin|moveYsub_pin|moveZplus_pin|moveZsub_pin
 80005ca:	f643 4307 	movw	r3, #15367	@ 0x3c07
 80005ce:	613b      	str	r3, [r7, #16]
                          |start_pin|stop_pin|reset_pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4811      	ldr	r0, [pc, #68]	@ (8000624 <MX_GPIO_Init+0x100>)
 80005e0:	f000 fda4 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = led_pin;
 80005e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <MX_GPIO_Init+0x100>)
 80005fe:	f000 fd95 	bl	800112c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	2028      	movs	r0, #40	@ 0x28
 8000608:	f000 fca7 	bl	8000f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800060c:	2028      	movs	r0, #40	@ 0x28
 800060e:	f000 fcc0 	bl	8000f92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	40010800 	.word	0x40010800
 8000624:	40010c00 	.word	0x40010c00

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fb5c 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f812 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ff76 	bl	8000524 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000638:	f000 f9ce 	bl	80009d8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800063c:	f000 fa1c 	bl	8000a78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000640:	f000 fa66 	bl	8000b10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000644:	f000 fab2 	bl	8000bac <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000648:	f000 fafe 	bl	8000c48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_FREERTOS_Unit();
 800064c:	f7ff fea0 	bl	8000390 <MX_FREERTOS_Unit>
  /* USER CODE END 2 */

  /* Start scheduler */
  osKernelStart();
 8000650:	f002 fcdb 	bl	800300a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <main+0x2c>

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	@ 0x40
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2228      	movs	r2, #40	@ 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fece 	bl	8004408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000694:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000696:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 ff31 	bl	8001508 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006ac:	f000 f819 	bl	80006e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f99e 	bl	8001a0c <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006d6:	f000 f804 	bl	80006e2 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3740      	adds	r7, #64	@ 0x40
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e6:	b672      	cpsid	i
}
 80006e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ea:	bf00      	nop
 80006ec:	e7fd      	b.n	80006ea <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <HAL_MspInit+0x68>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a17      	ldr	r2, [pc, #92]	@ (8000758 <HAL_MspInit+0x68>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6193      	str	r3, [r2, #24]
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <HAL_MspInit+0x68>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <HAL_MspInit+0x68>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	4a11      	ldr	r2, [pc, #68]	@ (8000758 <HAL_MspInit+0x68>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000718:	61d3      	str	r3, [r2, #28]
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <HAL_MspInit+0x68>)
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	210f      	movs	r1, #15
 800072a:	f06f 0001 	mvn.w	r0, #1
 800072e:	f000 fc14 	bl	8000f5a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000732:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <HAL_MspInit+0x6c>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_MspInit+0x6c>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000
 800075c:	40010000 	.word	0x40010000

08000760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a34      	ldr	r2, [pc, #208]	@ (8000840 <HAL_TIM_Base_MspInit+0xe0>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d114      	bne.n	800079c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a33      	ldr	r2, [pc, #204]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 8000778:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2105      	movs	r1, #5
 800078e:	2018      	movs	r0, #24
 8000790:	f000 fbe3 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000794:	2018      	movs	r0, #24
 8000796:	f000 fbfc 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800079a:	e04c      	b.n	8000836 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a4:	d114      	bne.n	80007d0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007a6:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a26      	ldr	r2, [pc, #152]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b24      	ldr	r3, [pc, #144]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2105      	movs	r1, #5
 80007c2:	201c      	movs	r0, #28
 80007c4:	f000 fbc9 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007c8:	201c      	movs	r0, #28
 80007ca:	f000 fbe2 	bl	8000f92 <HAL_NVIC_EnableIRQ>
}
 80007ce:	e032      	b.n	8000836 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <HAL_TIM_Base_MspInit+0xe8>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d114      	bne.n	8000804 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a19      	ldr	r2, [pc, #100]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2105      	movs	r1, #5
 80007f6:	201d      	movs	r0, #29
 80007f8:	f000 fbaf 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007fc:	201d      	movs	r0, #29
 80007fe:	f000 fbc8 	bl	8000f92 <HAL_NVIC_EnableIRQ>
}
 8000802:	e018      	b.n	8000836 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a10      	ldr	r2, [pc, #64]	@ (800084c <HAL_TIM_Base_MspInit+0xec>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d113      	bne.n	8000836 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a0c      	ldr	r2, [pc, #48]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <HAL_TIM_Base_MspInit+0xe4>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2105      	movs	r1, #5
 800082a:	201e      	movs	r0, #30
 800082c:	f000 fb95 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000830:	201e      	movs	r0, #30
 8000832:	f000 fbae 	bl	8000f92 <HAL_NVIC_EnableIRQ>
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40000400 	.word	0x40000400
 800084c:	40000800 	.word	0x40000800

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d139      	bne.n	80008e4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000870:	4b1f      	ldr	r3, [pc, #124]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a18      	ldr	r2, [pc, #96]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	2303      	movs	r3, #3
 80008ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <HAL_UART_MspInit+0xa4>)
 80008b6:	f000 fc39 	bl	800112c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <HAL_UART_MspInit+0xa4>)
 80008d0:	f000 fc2c 	bl	800112c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2105      	movs	r1, #5
 80008d8:	2025      	movs	r0, #37	@ 0x25
 80008da:	f000 fb3e 	bl	8000f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008de:	2025      	movs	r0, #37	@ 0x25
 80008e0:	f000 fb57 	bl	8000f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40013800 	.word	0x40013800
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010800 	.word	0x40010800

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 fa20 	bl	8000d74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000934:	f003 f946 	bl	8003bc4 <xTaskGetSchedulerState>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d001      	beq.n	8000942 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800093e:	f003 fb33 	bl	8003fa8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <TIM1_BRK_IRQHandler+0x10>)
 800094e:	f001 fabb 	bl	8001ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200003ac 	.word	0x200003ac

0800095c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000960:	4802      	ldr	r0, [pc, #8]	@ (800096c <TIM2_IRQHandler+0x10>)
 8000962:	f001 fab1 	bl	8001ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200003f4 	.word	0x200003f4

08000970 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <TIM3_IRQHandler+0x10>)
 8000976:	f001 faa7 	bl	8001ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000043c 	.word	0x2000043c

08000984 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <TIM4_IRQHandler+0x10>)
 800098a:	f001 fa9d 	bl	8001ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000484 	.word	0x20000484

08000998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <USART1_IRQHandler+0x10>)
 800099e:	f001 fe3b 	bl	8002618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200004cc 	.word	0x200004cc

080009ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80009b0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80009b4:	f000 fd86 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009b8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80009bc:	f000 fd82 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009c4:	f000 fd7e 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_TIM1_Init+0x98>)
 80009f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a74 <MX_TIM1_Init+0x9c>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <MX_TIM1_Init+0x98>)
 80009fc:	2247      	movs	r2, #71	@ 0x47
 80009fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a20:	4813      	ldr	r0, [pc, #76]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a22:	f001 f981 	bl	8001d28 <HAL_TIM_Base_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f7ff fe59 	bl	80006e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a3e:	f001 fb33 	bl	80020a8 <HAL_TIM_ConfigClockSource>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a48:	f7ff fe4b 	bl	80006e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <MX_TIM1_Init+0x98>)
 8000a5a:	f001 fd1d 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a64:	f7ff fe3d 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200003ac 	.word	0x200003ac
 8000a74:	40012c00 	.word	0x40012c00

08000a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000a9e:	2223      	movs	r2, #35	@ 0x23
 8000aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000aaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000abc:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000abe:	f001 f933 	bl	8001d28 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ac8:	f7ff fe0b 	bl	80006e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000ada:	f001 fae5 	bl	80020a8 <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ae4:	f7ff fdfd 	bl	80006e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_TIM2_Init+0x94>)
 8000af6:	f001 fccf 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f7ff fdef 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200003f4 	.word	0x200003f4

08000b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba8 <MX_TIM3_Init+0x98>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b34:	2223      	movs	r2, #35	@ 0x23
 8000b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b52:	4814      	ldr	r0, [pc, #80]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b54:	f001 f8e8 	bl	8001d28 <HAL_TIM_Base_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f7ff fdc0 	bl	80006e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b68:	f107 0308 	add.w	r3, r7, #8
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b70:	f001 fa9a 	bl	80020a8 <HAL_TIM_ConfigClockSource>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f7ff fdb2 	bl	80006e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_TIM3_Init+0x94>)
 8000b8c:	f001 fc84 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b96:	f7ff fda4 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000043c 	.word	0x2000043c
 8000ba8:	40000400 	.word	0x40000400

08000bac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0308 	add.w	r3, r7, #8
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000bca:	4a1e      	ldr	r2, [pc, #120]	@ (8000c44 <MX_TIM4_Init+0x98>)
 8000bcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000bd0:	2223      	movs	r2, #35	@ 0x23
 8000bd2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000bdc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000be0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000bea:	2280      	movs	r2, #128	@ 0x80
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bee:	4814      	ldr	r0, [pc, #80]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000bf0:	f001 f89a 	bl	8001d28 <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bfa:	f7ff fd72 	bl	80006e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000c0c:	f001 fa4c 	bl	80020a8 <HAL_TIM_ConfigClockSource>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f7ff fd64 	bl	80006e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c22:	463b      	mov	r3, r7
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <MX_TIM4_Init+0x94>)
 8000c28:	f001 fc36 	bl	8002498 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c32:	f7ff fd56 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000484 	.word	0x20000484
 8000c44:	40000800 	.word	0x40000800

08000c48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <MX_USART1_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c54:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_USART1_UART_Init+0x4c>)
 8000c80:	f001 fc7a 	bl	8002578 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f7ff fd2a 	bl	80006e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200004cc 	.word	0x200004cc
 8000c98:	40013800 	.word	0x40013800

08000c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c9c:	f7ff fe96 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ca2:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a09      	ldr	r2, [pc, #36]	@ (8000cdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb8:	4c09      	ldr	r4, [pc, #36]	@ (8000ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fba7 	bl	8004418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cca:	f7ff fcad 	bl	8000628 <main>
  bx lr
 8000cce:	4770      	bx	lr
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cd8:	08004560 	.word	0x08004560
  ldr r2, =_sbss
 8000cdc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ce0:	2000126c 	.word	0x2000126c

08000ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_2_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x28>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x28>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f923 	bl	8000f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fcf4 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40022000 	.word	0x40022000

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f93b 	bl	8000fae <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f903 	bl	8000f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_IncTick+0x1c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_IncTick+0x20>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a03      	ldr	r2, [pc, #12]	@ (8000d94 <HAL_IncTick+0x20>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000514 	.word	0x20000514

08000d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b02      	ldr	r3, [pc, #8]	@ (8000da8 <HAL_GetTick+0x10>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	20000514 	.word	0x20000514

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4906      	ldr	r1, [pc, #24]	@ (8000e44 <__NVIC_EnableIRQ+0x34>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	@ (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	@ 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	@ 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f10:	d301      	bcc.n	8000f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00f      	b.n	8000f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f16:	4a0a      	ldr	r2, [pc, #40]	@ (8000f40 <SysTick_Config+0x40>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f1e:	210f      	movs	r1, #15
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f7ff ff90 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <SysTick_Config+0x40>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f2e:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <SysTick_Config+0x40>)
 8000f30:	2207      	movs	r2, #7
 8000f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	e000e010 	.word	0xe000e010

08000f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff2d 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f6c:	f7ff ff42 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	68b9      	ldr	r1, [r7, #8]
 8000f76:	6978      	ldr	r0, [r7, #20]
 8000f78:	f7ff ff90 	bl	8000e9c <NVIC_EncodePriority>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff5f 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff35 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ffa2 	bl	8000f00 <SysTick_Config>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d008      	beq.n	8000ff0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e020      	b.n	8001032 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 020e 	bic.w	r2, r2, #14
 8000ffe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0201 	bic.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001018:	2101      	movs	r1, #1
 800101a:	fa01 f202 	lsl.w	r2, r1, r2
 800101e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2201      	movs	r2, #1
 8001024:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001030:	7bfb      	ldrb	r3, [r7, #15]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d005      	beq.n	8001060 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2204      	movs	r2, #4
 8001058:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e051      	b.n	8001104 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 020e 	bic.w	r2, r2, #14
 800106e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <HAL_DMA_Abort_IT+0xd4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d029      	beq.n	80010de <HAL_DMA_Abort_IT+0xa2>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <HAL_DMA_Abort_IT+0xd8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d022      	beq.n	80010da <HAL_DMA_Abort_IT+0x9e>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1f      	ldr	r2, [pc, #124]	@ (8001118 <HAL_DMA_Abort_IT+0xdc>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d01a      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x98>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1e      	ldr	r2, [pc, #120]	@ (800111c <HAL_DMA_Abort_IT+0xe0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d012      	beq.n	80010ce <HAL_DMA_Abort_IT+0x92>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001120 <HAL_DMA_Abort_IT+0xe4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00a      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x8c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001124 <HAL_DMA_Abort_IT+0xe8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d102      	bne.n	80010c2 <HAL_DMA_Abort_IT+0x86>
 80010bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010c0:	e00e      	b.n	80010e0 <HAL_DMA_Abort_IT+0xa4>
 80010c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010c6:	e00b      	b.n	80010e0 <HAL_DMA_Abort_IT+0xa4>
 80010c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010cc:	e008      	b.n	80010e0 <HAL_DMA_Abort_IT+0xa4>
 80010ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d2:	e005      	b.n	80010e0 <HAL_DMA_Abort_IT+0xa4>
 80010d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d8:	e002      	b.n	80010e0 <HAL_DMA_Abort_IT+0xa4>
 80010da:	2310      	movs	r3, #16
 80010dc:	e000      	b.n	80010e0 <HAL_DMA_Abort_IT+0xa4>
 80010de:	2301      	movs	r3, #1
 80010e0:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <HAL_DMA_Abort_IT+0xec>)
 80010e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
    } 
  }
  return status;
 8001104:	7bfb      	ldrb	r3, [r7, #15]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020008 	.word	0x40020008
 8001114:	4002001c 	.word	0x4002001c
 8001118:	40020030 	.word	0x40020030
 800111c:	40020044 	.word	0x40020044
 8001120:	40020058 	.word	0x40020058
 8001124:	4002006c 	.word	0x4002006c
 8001128:	40020000 	.word	0x40020000

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b08b      	sub	sp, #44	@ 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e169      	b.n	8001414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001140:	2201      	movs	r2, #1
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8158 	bne.w	800140e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a9a      	ldr	r2, [pc, #616]	@ (80013cc <HAL_GPIO_Init+0x2a0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d05e      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001168:	4a98      	ldr	r2, [pc, #608]	@ (80013cc <HAL_GPIO_Init+0x2a0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d875      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800116e:	4a98      	ldr	r2, [pc, #608]	@ (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d058      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001174:	4a96      	ldr	r2, [pc, #600]	@ (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d86f      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800117a:	4a96      	ldr	r2, [pc, #600]	@ (80013d4 <HAL_GPIO_Init+0x2a8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d052      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001180:	4a94      	ldr	r2, [pc, #592]	@ (80013d4 <HAL_GPIO_Init+0x2a8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d869      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001186:	4a94      	ldr	r2, [pc, #592]	@ (80013d8 <HAL_GPIO_Init+0x2ac>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d04c      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 800118c:	4a92      	ldr	r2, [pc, #584]	@ (80013d8 <HAL_GPIO_Init+0x2ac>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d863      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001192:	4a92      	ldr	r2, [pc, #584]	@ (80013dc <HAL_GPIO_Init+0x2b0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d046      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001198:	4a90      	ldr	r2, [pc, #576]	@ (80013dc <HAL_GPIO_Init+0x2b0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d85d      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d82a      	bhi.n	80011f8 <HAL_GPIO_Init+0xcc>
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d859      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 80011a6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <HAL_GPIO_Init+0x80>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001201 	.word	0x08001201
 80011b4:	08001213 	.word	0x08001213
 80011b8:	08001255 	.word	0x08001255
 80011bc:	0800125b 	.word	0x0800125b
 80011c0:	0800125b 	.word	0x0800125b
 80011c4:	0800125b 	.word	0x0800125b
 80011c8:	0800125b 	.word	0x0800125b
 80011cc:	0800125b 	.word	0x0800125b
 80011d0:	0800125b 	.word	0x0800125b
 80011d4:	0800125b 	.word	0x0800125b
 80011d8:	0800125b 	.word	0x0800125b
 80011dc:	0800125b 	.word	0x0800125b
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	0800125b 	.word	0x0800125b
 80011e8:	0800125b 	.word	0x0800125b
 80011ec:	0800125b 	.word	0x0800125b
 80011f0:	08001209 	.word	0x08001209
 80011f4:	0800121d 	.word	0x0800121d
 80011f8:	4a79      	ldr	r2, [pc, #484]	@ (80013e0 <HAL_GPIO_Init+0x2b4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fe:	e02c      	b.n	800125a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e029      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	3304      	adds	r3, #4
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e024      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	3308      	adds	r3, #8
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e01f      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	330c      	adds	r3, #12
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e01a      	b.n	800125c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122e:	2304      	movs	r3, #4
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e013      	b.n	800125c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	611a      	str	r2, [r3, #16]
          break;
 8001246:	e009      	b.n	800125c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001248:	2308      	movs	r3, #8
 800124a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	615a      	str	r2, [r3, #20]
          break;
 8001252:	e003      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x130>
          break;
 800125a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2bff      	cmp	r3, #255	@ 0xff
 8001260:	d801      	bhi.n	8001266 <HAL_GPIO_Init+0x13a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	e001      	b.n	800126a <HAL_GPIO_Init+0x13e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3304      	adds	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2bff      	cmp	r3, #255	@ 0xff
 8001270:	d802      	bhi.n	8001278 <HAL_GPIO_Init+0x14c>
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x152>
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	3b08      	subs	r3, #8
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	210f      	movs	r1, #15
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	6a39      	ldr	r1, [r7, #32]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	431a      	orrs	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80b1 	beq.w	800140e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ac:	4b4d      	ldr	r3, [pc, #308]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b4a      	ldr	r3, [pc, #296]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c4:	4a48      	ldr	r2, [pc, #288]	@ (80013e8 <HAL_GPIO_Init+0x2bc>)
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a40      	ldr	r2, [pc, #256]	@ (80013ec <HAL_GPIO_Init+0x2c0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1ec>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3f      	ldr	r2, [pc, #252]	@ (80013f0 <HAL_GPIO_Init+0x2c4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1e8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3d      	ldr	r2, [pc, #244]	@ (80013f8 <HAL_GPIO_Init+0x2cc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e0>
 8001308:	2303      	movs	r3, #3
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 800130c:	2304      	movs	r3, #4
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001310:	2302      	movs	r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001318:	2300      	movs	r3, #0
 800131a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132a:	492f      	ldr	r1, [pc, #188]	@ (80013e8 <HAL_GPIO_Init+0x2bc>)
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	492c      	ldr	r1, [pc, #176]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	4928      	ldr	r1, [pc, #160]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800136c:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	4922      	ldr	r1, [pc, #136]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	60cb      	str	r3, [r1, #12]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137a:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	491e      	ldr	r1, [pc, #120]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4918      	ldr	r1, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4914      	ldr	r1, [pc, #80]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d021      	beq.n	8001400 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	490e      	ldr	r1, [pc, #56]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
 80013c8:	e021      	b.n	800140e <HAL_GPIO_Init+0x2e2>
 80013ca:	bf00      	nop
 80013cc:	10320000 	.word	0x10320000
 80013d0:	10310000 	.word	0x10310000
 80013d4:	10220000 	.word	0x10220000
 80013d8:	10210000 	.word	0x10210000
 80013dc:	10120000 	.word	0x10120000
 80013e0:	10110000 	.word	0x10110000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40011400 	.word	0x40011400
 80013fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_GPIO_Init+0x304>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	43db      	mvns	r3, r3
 8001408:	4909      	ldr	r1, [pc, #36]	@ (8001430 <HAL_GPIO_Init+0x304>)
 800140a:	4013      	ands	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	3301      	adds	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f ae8e 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	372c      	adds	r7, #44	@ 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	4013      	ands	r3, r2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	460b      	mov	r3, r1
 800146c:	807b      	strh	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001472:	787b      	ldrb	r3, [r7, #1]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800147e:	e003      	b.n	8001488 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	041a      	lsls	r2, r3, #16
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	611a      	str	r2, [r3, #16]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001492:	b480      	push	{r7}
 8001494:	b085      	sub	sp, #20
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4013      	ands	r3, r2
 80014aa:	041a      	lsls	r2, r3, #16
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	887b      	ldrh	r3, [r7, #2]
 80014b2:	400b      	ands	r3, r1
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f806 	bl	80014f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40010400 	.word	0x40010400

080014f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e272      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8087 	beq.w	8001636 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001528:	4b92      	ldr	r3, [pc, #584]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b04      	cmp	r3, #4
 8001532:	d00c      	beq.n	800154e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001534:	4b8f      	ldr	r3, [pc, #572]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d112      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
 8001540:	4b8c      	ldr	r3, [pc, #560]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154c:	d10b      	bne.n	8001566 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154e:	4b89      	ldr	r3, [pc, #548]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d06c      	beq.n	8001634 <HAL_RCC_OscConfig+0x12c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d168      	bne.n	8001634 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e24c      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x76>
 8001570:	4b80      	ldr	r3, [pc, #512]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a7f      	ldr	r2, [pc, #508]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e02e      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b7b      	ldr	r3, [pc, #492]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7a      	ldr	r2, [pc, #488]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b78      	ldr	r3, [pc, #480]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a77      	ldr	r2, [pc, #476]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001598:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015a8:	d10c      	bne.n	80015c4 <HAL_RCC_OscConfig+0xbc>
 80015aa:	4b72      	ldr	r3, [pc, #456]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a71      	ldr	r2, [pc, #452]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e00b      	b.n	80015dc <HAL_RCC_OscConfig+0xd4>
 80015c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6a      	ldr	r2, [pc, #424]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b68      	ldr	r3, [pc, #416]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a67      	ldr	r2, [pc, #412]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d013      	beq.n	800160c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fbd8 	bl	8000d98 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbd4 	bl	8000d98 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	@ 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e200      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xe4>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fbc4 	bl	8000d98 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fbc0 	bl	8000d98 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	@ 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1ec      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x10c>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d063      	beq.n	800170a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001642:	4b4c      	ldr	r3, [pc, #304]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00b      	beq.n	8001666 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164e:	4b49      	ldr	r3, [pc, #292]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b08      	cmp	r3, #8
 8001658:	d11c      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
 800165a:	4b46      	ldr	r3, [pc, #280]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d116      	bne.n	8001694 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	4b43      	ldr	r3, [pc, #268]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e1c0      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b3d      	ldr	r3, [pc, #244]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4939      	ldr	r1, [pc, #228]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	e03a      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d020      	beq.n	80016de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800169c:	4b36      	ldr	r3, [pc, #216]	@ (8001778 <HAL_RCC_OscConfig+0x270>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb79 	bl	8000d98 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb75 	bl	8000d98 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e1a1      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4927      	ldr	r1, [pc, #156]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <HAL_RCC_OscConfig+0x270>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb58 	bl	8000d98 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ec:	f7ff fb54 	bl	8000d98 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e180      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d03a      	beq.n	800178c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d019      	beq.n	8001752 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_RCC_OscConfig+0x274>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff fb38 	bl	8000d98 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff fb34 	bl	8000d98 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e160      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_RCC_OscConfig+0x26c>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800174a:	2001      	movs	r0, #1
 800174c:	f000 face 	bl	8001cec <RCC_Delay>
 8001750:	e01c      	b.n	800178c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_RCC_OscConfig+0x274>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff fb1e 	bl	8000d98 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175e:	e00f      	b.n	8001780 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fb1a 	bl	8000d98 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d908      	bls.n	8001780 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e146      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	42420000 	.word	0x42420000
 800177c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001780:	4b92      	ldr	r3, [pc, #584]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1e9      	bne.n	8001760 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80a6 	beq.w	80018e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179e:	4b8b      	ldr	r3, [pc, #556]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10d      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b88      	ldr	r3, [pc, #544]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a87      	ldr	r2, [pc, #540]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b85      	ldr	r3, [pc, #532]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c6:	4b82      	ldr	r3, [pc, #520]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017d2:	4b7f      	ldr	r3, [pc, #508]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a7e      	ldr	r2, [pc, #504]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fadb 	bl	8000d98 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fad7 	bl	8000d98 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b64      	cmp	r3, #100	@ 0x64
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e103      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f8:	4b75      	ldr	r3, [pc, #468]	@ (80019d0 <HAL_RCC_OscConfig+0x4c8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x312>
 800180c:	4b6f      	ldr	r3, [pc, #444]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4a6e      	ldr	r2, [pc, #440]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6213      	str	r3, [r2, #32]
 8001818:	e02d      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x334>
 8001822:	4b6a      	ldr	r3, [pc, #424]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a69      	ldr	r2, [pc, #420]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	4b67      	ldr	r3, [pc, #412]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	4a66      	ldr	r2, [pc, #408]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6213      	str	r3, [r2, #32]
 800183a:	e01c      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x356>
 8001844:	4b61      	ldr	r3, [pc, #388]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a60      	ldr	r2, [pc, #384]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4b5e      	ldr	r3, [pc, #376]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a5d      	ldr	r2, [pc, #372]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x36e>
 800185e:	4b5b      	ldr	r3, [pc, #364]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a5a      	ldr	r2, [pc, #360]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	4b58      	ldr	r3, [pc, #352]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a57      	ldr	r2, [pc, #348]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d015      	beq.n	80018aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187e:	f7ff fa8b 	bl	8000d98 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff fa87 	bl	8000d98 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e0b1      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189c:	4b4b      	ldr	r3, [pc, #300]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ee      	beq.n	8001886 <HAL_RCC_OscConfig+0x37e>
 80018a8:	e014      	b.n	80018d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa75 	bl	8000d98 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fa71 	bl	8000d98 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e09b      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c8:	4b40      	ldr	r3, [pc, #256]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ee      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018da:	4b3c      	ldr	r3, [pc, #240]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a3b      	ldr	r2, [pc, #236]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8087 	beq.w	80019fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f0:	4b36      	ldr	r3, [pc, #216]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d061      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d146      	bne.n	8001992 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff fa45 	bl	8000d98 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff fa41 	bl	8000d98 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e06d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001938:	d108      	bne.n	800194c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4921      	ldr	r1, [pc, #132]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800194c:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a19      	ldr	r1, [r3, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	430b      	orrs	r3, r1
 800195e:	491b      	ldr	r1, [pc, #108]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001964:	4b1b      	ldr	r3, [pc, #108]	@ (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196a:	f7ff fa15 	bl	8000d98 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff fa11 	bl	8000d98 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e03d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001984:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x46a>
 8001990:	e035      	b.n	80019fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_RCC_OscConfig+0x4cc>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f9fe 	bl	8000d98 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f9fa 	bl	8000d98 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e026      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x498>
 80019be:	e01e      	b.n	80019fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e019      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40007000 	.word	0x40007000
 80019d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_RCC_OscConfig+0x500>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0d0      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d910      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b67      	ldr	r3, [pc, #412]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4965      	ldr	r1, [pc, #404]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4a52      	ldr	r2, [pc, #328]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d040      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d115      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aca:	4b41      	ldr	r3, [pc, #260]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e073      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ada:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e06b      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	4b39      	ldr	r3, [pc, #228]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f023 0203 	bic.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4936      	ldr	r1, [pc, #216]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afc:	f7ff f94c 	bl	8000d98 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	e00a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff f948 	bl	8000d98 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e053      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 020c 	and.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d1eb      	bne.n	8001b04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d210      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 0207 	bic.w	r2, r3, #7
 8001b42:	4922      	ldr	r1, [pc, #136]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	490a      	ldr	r1, [pc, #40]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	5ccb      	ldrb	r3, [r1, r3]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_RCC_ClockConfig+0x1d0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f8aa 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	0800452c 	.word	0x0800452c
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x30>
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x36>
 8001c0e:	e027      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c10:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c12:	613b      	str	r3, [r7, #16]
      break;
 8001c14:	e027      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d010      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0c5b      	lsrs	r3, r3, #17
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c42:	fb03 f202 	mul.w	r2, r3, r2
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e004      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0c      	ldr	r2, [pc, #48]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	613b      	str	r3, [r7, #16]
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c62:	613b      	str	r3, [r7, #16]
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	693b      	ldr	r3, [r7, #16]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200
 8001c7c:	08004544 	.word	0x08004544
 8001c80:	08004554 	.word	0x08004554
 8001c84:	003d0900 	.word	0x003d0900

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b02      	ldr	r3, [pc, #8]	@ (8001c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca0:	f7ff fff2 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4903      	ldr	r1, [pc, #12]	@ (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	0800453c 	.word	0x0800453c

08001cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc8:	f7ff ffde 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0adb      	lsrs	r3, r3, #11
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4903      	ldr	r1, [pc, #12]	@ (8001ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cda:	5ccb      	ldrb	r3, [r1, r3]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	0800453c 	.word	0x0800453c

08001cec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <RCC_Delay+0x34>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <RCC_Delay+0x38>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	0a5b      	lsrs	r3, r3, #9
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d08:	bf00      	nop
  }
  while (Delay --);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	60fa      	str	r2, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1f9      	bne.n	8001d08 <RCC_Delay+0x1c>
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000000 	.word	0x20000000
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e041      	b.n	8001dbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fd06 	bl	8000760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fa92 	bl	8002290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e03a      	b.n	8001e56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a18      	ldr	r2, [pc, #96]	@ (8001e60 <HAL_TIM_Base_Start_IT+0x98>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x58>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0a:	d009      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x58>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a14      	ldr	r2, [pc, #80]	@ (8001e64 <HAL_TIM_Base_Start_IT+0x9c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x58>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a13      	ldr	r2, [pc, #76]	@ (8001e68 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d010      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	e007      	b.n	8001e54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40000400 	.word	0x40000400
 8001e68:	40000800 	.word	0x40000800

08001e6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6a1a      	ldr	r2, [r3, #32]
 8001e8a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10f      	bne.n	8001eb4 <HAL_TIM_Base_Stop_IT+0x48>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a1a      	ldr	r2, [r3, #32]
 8001e9a:	f240 4344 	movw	r3, #1092	@ 0x444
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <HAL_TIM_Base_Stop_IT+0x48>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d020      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0202 	mvn.w	r2, #2
 8001efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f9a1 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f994 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f9a3 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0304 	and.w	r3, r3, #4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d020      	beq.n	8001f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01b      	beq.n	8001f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0204 	mvn.w	r2, #4
 8001f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f97b 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 8001f64:	e005      	b.n	8001f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f96e 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f97d 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d020      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d01b      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0208 	mvn.w	r2, #8
 8001f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f955 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 8001fb0:	e005      	b.n	8001fbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f948 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f957 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d020      	beq.n	8002010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01b      	beq.n	8002010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0210 	mvn.w	r2, #16
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f92f 	bl	800225a <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f922 	bl	8002248 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f931 	bl	800226c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00c      	beq.n	8002034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0201 	mvn.w	r2, #1
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f901 	bl	8002236 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00c      	beq.n	8002058 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa87 	bl	8002566 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002068:	2b00      	cmp	r3, #0
 800206a:	d007      	beq.n	800207c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f901 	bl	800227e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0220 	mvn.w	r2, #32
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa5a 	bl	8002554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_TIM_ConfigClockSource+0x1c>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0b4      	b.n	800222e <HAL_TIM_ConfigClockSource+0x186>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020fc:	d03e      	beq.n	800217c <HAL_TIM_ConfigClockSource+0xd4>
 80020fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002102:	f200 8087 	bhi.w	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 8002106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800210a:	f000 8086 	beq.w	800221a <HAL_TIM_ConfigClockSource+0x172>
 800210e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002112:	d87f      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 8002114:	2b70      	cmp	r3, #112	@ 0x70
 8002116:	d01a      	beq.n	800214e <HAL_TIM_ConfigClockSource+0xa6>
 8002118:	2b70      	cmp	r3, #112	@ 0x70
 800211a:	d87b      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 800211c:	2b60      	cmp	r3, #96	@ 0x60
 800211e:	d050      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002120:	2b60      	cmp	r3, #96	@ 0x60
 8002122:	d877      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 8002124:	2b50      	cmp	r3, #80	@ 0x50
 8002126:	d03c      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002128:	2b50      	cmp	r3, #80	@ 0x50
 800212a:	d873      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 800212c:	2b40      	cmp	r3, #64	@ 0x40
 800212e:	d058      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002130:	2b40      	cmp	r3, #64	@ 0x40
 8002132:	d86f      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 8002134:	2b30      	cmp	r3, #48	@ 0x30
 8002136:	d064      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0x15a>
 8002138:	2b30      	cmp	r3, #48	@ 0x30
 800213a:	d86b      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 800213c:	2b20      	cmp	r3, #32
 800213e:	d060      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0x15a>
 8002140:	2b20      	cmp	r3, #32
 8002142:	d867      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d05c      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0x15a>
 8002148:	2b10      	cmp	r3, #16
 800214a:	d05a      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0x15a>
 800214c:	e062      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800215e:	f000 f97c 	bl	800245a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002170:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	609a      	str	r2, [r3, #8]
      break;
 800217a:	e04f      	b.n	800221c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800218c:	f000 f965 	bl	800245a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800219e:	609a      	str	r2, [r3, #8]
      break;
 80021a0:	e03c      	b.n	800221c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ae:	461a      	mov	r2, r3
 80021b0:	f000 f8dc 	bl	800236c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2150      	movs	r1, #80	@ 0x50
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f933 	bl	8002426 <TIM_ITRx_SetConfig>
      break;
 80021c0:	e02c      	b.n	800221c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ce:	461a      	mov	r2, r3
 80021d0:	f000 f8fa 	bl	80023c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2160      	movs	r1, #96	@ 0x60
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f923 	bl	8002426 <TIM_ITRx_SetConfig>
      break;
 80021e0:	e01c      	b.n	800221c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ee:	461a      	mov	r2, r3
 80021f0:	f000 f8bc 	bl	800236c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2140      	movs	r1, #64	@ 0x40
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f913 	bl	8002426 <TIM_ITRx_SetConfig>
      break;
 8002200:	e00c      	b.n	800221c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f000 f90a 	bl	8002426 <TIM_ITRx_SetConfig>
      break;
 8002212:	e003      	b.n	800221c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      break;
 8002218:	e000      	b.n	800221c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800221a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002360 <TIM_Base_SetConfig+0xd0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00b      	beq.n	80022c0 <TIM_Base_SetConfig+0x30>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ae:	d007      	beq.n	80022c0 <TIM_Base_SetConfig+0x30>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002364 <TIM_Base_SetConfig+0xd4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_Base_SetConfig+0x30>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <TIM_Base_SetConfig+0xd8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d108      	bne.n	80022d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a22      	ldr	r2, [pc, #136]	@ (8002360 <TIM_Base_SetConfig+0xd0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022e0:	d007      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002364 <TIM_Base_SetConfig+0xd4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_Base_SetConfig+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002368 <TIM_Base_SetConfig+0xd8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d108      	bne.n	8002304 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <TIM_Base_SetConfig+0xd0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d103      	bne.n	8002338 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f023 0201 	bic.w	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	611a      	str	r2, [r3, #16]
  }
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800

0800236c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	f023 0201 	bic.w	r2, r3, #1
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f023 030a 	bic.w	r3, r3, #10
 80023a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	621a      	str	r2, [r3, #32]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 0210 	bic.w	r2, r3, #16
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80023f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	031b      	lsls	r3, r3, #12
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002404:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	621a      	str	r2, [r3, #32]
}
 800241c:	bf00      	nop
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	f043 0307 	orr.w	r3, r3, #7
 8002448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800245a:	b480      	push	{r7}
 800245c:	b087      	sub	sp, #28
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002474:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	021a      	lsls	r2, r3, #8
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	431a      	orrs	r2, r3
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4313      	orrs	r3, r2
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	609a      	str	r2, [r3, #8]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e046      	b.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a16      	ldr	r2, [pc, #88]	@ (8002548 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00e      	beq.n	8002512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fc:	d009      	beq.n	8002512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a12      	ldr	r2, [pc, #72]	@ (800254c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d004      	beq.n	8002512 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a10      	ldr	r2, [pc, #64]	@ (8002550 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d10c      	bne.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4313      	orrs	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40012c00 	.word	0x40012c00
 800254c:	40000400 	.word	0x40000400
 8002550:	40000800 	.word	0x40000800

08002554 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e042      	b.n	8002610 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7fe f956 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	@ 0x24
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fc7f 	bl	8002ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b0ba      	sub	sp, #232	@ 0xe8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10f      	bne.n	800267e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800265e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_UART_IRQHandler+0x66>
 800266a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fb63 	bl	8002d42 <UART_Receive_IT>
      return;
 800267c:	e25b      	b.n	8002b36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800267e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80de 	beq.w	8002844 <HAL_UART_IRQHandler+0x22c>
 8002688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d106      	bne.n	80026a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002698:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80d1 	beq.w	8002844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_UART_IRQHandler+0xae>
 80026ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026be:	f043 0201 	orr.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_UART_IRQHandler+0xd2>
 80026d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	f043 0202 	orr.w	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_UART_IRQHandler+0xf6>
 80026f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	f043 0204 	orr.w	r2, r3, #4
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800270e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d011      	beq.n	800273e <HAL_UART_IRQHandler+0x126>
 800271a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d005      	beq.n	800273e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	f043 0208 	orr.w	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 81f2 	beq.w	8002b2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_UART_IRQHandler+0x14e>
 8002754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 faee 	bl	8002d42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_UART_IRQHandler+0x17a>
 800278a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d04f      	beq.n	8002832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9f8 	bl	8002b88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d041      	beq.n	800282a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3314      	adds	r3, #20
 80027ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027b4:	e853 3f00 	ldrex	r3, [r3]
 80027b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3314      	adds	r3, #20
 80027ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1d9      	bne.n	80027a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d013      	beq.n	8002822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fe:	4a7e      	ldr	r2, [pc, #504]	@ (80029f8 <HAL_UART_IRQHandler+0x3e0>)
 8002800:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fc18 	bl	800103c <HAL_DMA_Abort_IT>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800281c:	4610      	mov	r0, r2
 800281e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002820:	e00e      	b.n	8002840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f99c 	bl	8002b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002828:	e00a      	b.n	8002840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f998 	bl	8002b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e006      	b.n	8002840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f994 	bl	8002b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800283e:	e175      	b.n	8002b2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	bf00      	nop
    return;
 8002842:	e173      	b.n	8002b2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 814f 	bne.w	8002aec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800284e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 8148 	beq.w	8002aec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8141 	beq.w	8002aec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80b6 	beq.w	80029fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800289c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8145 	beq.w	8002b30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028ae:	429a      	cmp	r2, r3
 80028b0:	f080 813e 	bcs.w	8002b30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	f000 8088 	beq.w	80029d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80028f4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002900:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002904:	e841 2300 	strex	r3, r2, [r1]
 8002908:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800290c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1d9      	bne.n	80028c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3314      	adds	r3, #20
 800291a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800291e:	e853 3f00 	ldrex	r3, [r3]
 8002922:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002938:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800293c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002940:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002944:	e841 2300 	strex	r3, r2, [r1]
 8002948:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800294a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e1      	bne.n	8002914 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3314      	adds	r3, #20
 8002970:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002974:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002976:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800297a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002982:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e3      	bne.n	8002950 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029a0:	e853 3f00 	ldrex	r3, [r3]
 80029a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029a8:	f023 0310 	bic.w	r3, r3, #16
 80029ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	330c      	adds	r3, #12
 80029b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029bc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029c2:	e841 2300 	strex	r3, r2, [r1]
 80029c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1e3      	bne.n	8002996 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe faf7 	bl	8000fc6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f8bf 	bl	8002b72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029f4:	e09c      	b.n	8002b30 <HAL_UART_IRQHandler+0x518>
 80029f6:	bf00      	nop
 80029f8:	08002c4d 	.word	0x08002c4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 808e 	beq.w	8002b34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8089 	beq.w	8002b34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2c:	e853 3f00 	ldrex	r3, [r3]
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	330c      	adds	r3, #12
 8002a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a46:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e3      	bne.n	8002a22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	623b      	str	r3, [r7, #32]
   return(result);
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3314      	adds	r3, #20
 8002a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e3      	bne.n	8002a5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	e853 3f00 	ldrex	r3, [r3]
 8002aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0310 	bic.w	r3, r3, #16
 8002ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ac4:	61fa      	str	r2, [r7, #28]
 8002ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	69b9      	ldr	r1, [r7, #24]
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e3      	bne.n	8002aa0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f844 	bl	8002b72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002aea:	e023      	b.n	8002b34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <HAL_UART_IRQHandler+0x4f4>
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8b5 	bl	8002c74 <UART_Transmit_IT>
    return;
 8002b0a:	e014      	b.n	8002b36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <HAL_UART_IRQHandler+0x51e>
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8f4 	bl	8002d12 <UART_EndTransmit_IT>
    return;
 8002b2a:	e004      	b.n	8002b36 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b2c:	bf00      	nop
 8002b2e:	e002      	b.n	8002b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b34:	bf00      	nop
  }
}
 8002b36:	37e8      	adds	r7, #232	@ 0xe8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b095      	sub	sp, #84	@ 0x54
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	330c      	adds	r3, #12
 8002b96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	330c      	adds	r3, #12
 8002bae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002bb0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e5      	bne.n	8002b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3314      	adds	r3, #20
 8002be2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e5      	bne.n	8002bc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d119      	bne.n	8002c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	330c      	adds	r3, #12
 8002c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	e853 3f00 	ldrex	r3, [r3]
 8002c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0310 	bic.w	r3, r3, #16
 8002c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c20:	61ba      	str	r2, [r7, #24]
 8002c22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c24:	6979      	ldr	r1, [r7, #20]
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	e841 2300 	strex	r3, r2, [r1]
 8002c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c42:	bf00      	nop
 8002c44:	3754      	adds	r7, #84	@ 0x54
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ff7a 	bl	8002b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b21      	cmp	r3, #33	@ 0x21
 8002c86:	d13e      	bne.n	8002d06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c90:	d114      	bne.n	8002cbc <UART_Transmit_IT+0x48>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d110      	bne.n	8002cbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	1c9a      	adds	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]
 8002cba:	e008      	b.n	8002cce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	1c59      	adds	r1, r3, #1
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6211      	str	r1, [r2, #32]
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10f      	bne.n	8002d02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cf0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff02 	bl	8002b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08c      	sub	sp, #48	@ 0x30
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b22      	cmp	r3, #34	@ 0x22
 8002d54:	f040 80ae 	bne.w	8002eb4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d60:	d117      	bne.n	8002d92 <UART_Receive_IT+0x50>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d113      	bne.n	8002d92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	1c9a      	adds	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d90:	e026      	b.n	8002de0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da4:	d007      	beq.n	8002db6 <UART_Receive_IT+0x74>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <UART_Receive_IT+0x82>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e008      	b.n	8002dd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4619      	mov	r1, r3
 8002dee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d15d      	bne.n	8002eb0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0220 	bic.w	r2, r2, #32
 8002e02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d135      	bne.n	8002ea6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	e853 3f00 	ldrex	r3, [r3]
 8002e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f023 0310 	bic.w	r3, r3, #16
 8002e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e60:	623a      	str	r2, [r7, #32]
 8002e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	69f9      	ldr	r1, [r7, #28]
 8002e66:	6a3a      	ldr	r2, [r7, #32]
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e5      	bne.n	8002e40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d10a      	bne.n	8002e98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff fe67 	bl	8002b72 <HAL_UARTEx_RxEventCallback>
 8002ea4:	e002      	b.n	8002eac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fe51 	bl	8002b4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e002      	b.n	8002eb6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3730      	adds	r7, #48	@ 0x30
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002efa:	f023 030c 	bic.w	r3, r3, #12
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd4 <UART_SetConfig+0x114>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d103      	bne.n	8002f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f28:	f7fe fecc 	bl	8001cc4 <HAL_RCC_GetPCLK2Freq>
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	e002      	b.n	8002f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f30:	f7fe feb4 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 8002f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009a      	lsls	r2, r3, #2
 8002f40:	441a      	add	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <UART_SetConfig+0x118>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	0119      	lsls	r1, r3, #4
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009a      	lsls	r2, r3, #2
 8002f60:	441a      	add	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <UART_SetConfig+0x118>)
 8002f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2064      	movs	r0, #100	@ 0x64
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	3332      	adds	r3, #50	@ 0x32
 8002f80:	4a15      	ldr	r2, [pc, #84]	@ (8002fd8 <UART_SetConfig+0x118>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8c:	4419      	add	r1, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009a      	lsls	r2, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <UART_SetConfig+0x118>)
 8002fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2064      	movs	r0, #100	@ 0x64
 8002fae:	fb00 f303 	mul.w	r3, r0, r3
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	3332      	adds	r3, #50	@ 0x32
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <UART_SetConfig+0x118>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f003 020f 	and.w	r2, r3, #15
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	440a      	add	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	51eb851f 	.word	0x51eb851f

08002fdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fee:	2b84      	cmp	r3, #132	@ 0x84
 8002ff0:	d005      	beq.n	8002ffe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3303      	adds	r3, #3
 8002ffc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800300e:	f000 fadf 	bl	80035d0 <vTaskStartScheduler>
  
  return osOK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}

08003018 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b089      	sub	sp, #36	@ 0x24
 800301c:	af04      	add	r7, sp, #16
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <osThreadCreate+0x54>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01c      	beq.n	800306c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685c      	ldr	r4, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691e      	ldr	r6, [r3, #16]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ffc9 	bl	8002fdc <makeFreeRtosPriority>
 800304a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003054:	9202      	str	r2, [sp, #8]
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	9100      	str	r1, [sp, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	4632      	mov	r2, r6
 800305e:	4629      	mov	r1, r5
 8003060:	4620      	mov	r0, r4
 8003062:	f000 f8e8 	bl	8003236 <xTaskCreateStatic>
 8003066:	4603      	mov	r3, r0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e01c      	b.n	80030a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685c      	ldr	r4, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003078:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ffab 	bl	8002fdc <makeFreeRtosPriority>
 8003086:	4602      	mov	r2, r0
 8003088:	f107 030c 	add.w	r3, r7, #12
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	9200      	str	r2, [sp, #0]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4632      	mov	r2, r6
 8003094:	4629      	mov	r1, r5
 8003096:	4620      	mov	r0, r4
 8003098:	f000 f92d 	bl	80032f6 <xTaskCreate>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d001      	beq.n	80030a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030a6:	68fb      	ldr	r3, [r7, #12]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030b0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <osDelay+0x16>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	e000      	b.n	80030c8 <osDelay+0x18>
 80030c6:	2301      	movs	r3, #1
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fa4b 	bl	8003564 <vTaskDelay>
  
  return osOK;
 80030ce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f103 0208 	add.w	r2, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f103 0208 	add.w	r2, r3, #8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f103 0208 	add.w	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800312e:	b480      	push	{r7}
 8003130:	b085      	sub	sp, #20
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr

08003174 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d103      	bne.n	8003194 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	e00c      	b.n	80031ae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3308      	adds	r3, #8
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e002      	b.n	80031a2 <vListInsert+0x2e>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d2f6      	bcs.n	800319c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	601a      	str	r2, [r3, #0]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bc80      	pop	{r7}
 80031e2:	4770      	bx	lr

080031e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6892      	ldr	r2, [r2, #8]
 80031fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6852      	ldr	r2, [r2, #4]
 8003204:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d103      	bne.n	8003218 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003236:	b580      	push	{r7, lr}
 8003238:	b08e      	sub	sp, #56	@ 0x38
 800323a:	af04      	add	r7, sp, #16
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10b      	bne.n	8003262 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	e7fd      	b.n	800325e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10b      	bne.n	8003280 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326c:	f383 8811 	msr	BASEPRI, r3
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	61fb      	str	r3, [r7, #28]
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003280:	2354      	movs	r3, #84	@ 0x54
 8003282:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b54      	cmp	r3, #84	@ 0x54
 8003288:	d00b      	beq.n	80032a2 <xTaskCreateStatic+0x6c>
	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	61bb      	str	r3, [r7, #24]
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	e7fd      	b.n	800329e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01e      	beq.n	80032e8 <xTaskCreateStatic+0xb2>
 80032aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01b      	beq.n	80032e8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032c2:	2300      	movs	r3, #0
 80032c4:	9303      	str	r3, [sp, #12]
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	9302      	str	r3, [sp, #8]
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f850 	bl	8003380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80032e2:	f000 f8d5 	bl	8003490 <prvAddNewTaskToReadyList>
 80032e6:	e001      	b.n	80032ec <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032ec:	697b      	ldr	r3, [r7, #20]
	}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3728      	adds	r7, #40	@ 0x28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b08c      	sub	sp, #48	@ 0x30
 80032fa:	af04      	add	r7, sp, #16
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fe90 	bl	8004030 <pvPortMalloc>
 8003310:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003318:	2054      	movs	r0, #84	@ 0x54
 800331a:	f000 fe89 	bl	8004030 <pvPortMalloc>
 800331e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
 800332c:	e005      	b.n	800333a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800332e:	6978      	ldr	r0, [r7, #20]
 8003330:	f000 ff4c 	bl	80041cc <vPortFree>
 8003334:	e001      	b.n	800333a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d017      	beq.n	8003370 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	2300      	movs	r3, #0
 800334c:	9303      	str	r3, [sp, #12]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	9302      	str	r3, [sp, #8]
 8003352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f80e 	bl	8003380 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003364:	69f8      	ldr	r0, [r7, #28]
 8003366:	f000 f893 	bl	8003490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800336a:	2301      	movs	r3, #1
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e002      	b.n	8003376 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003376:	69bb      	ldr	r3, [r7, #24]
	}
 8003378:	4618      	mov	r0, r3
 800337a:	3720      	adds	r7, #32
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003398:	3b01      	subs	r3, #1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <prvInitialiseNewTask+0x4a>
	__asm volatile
 80033b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	617b      	str	r3, [r7, #20]
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	e7fd      	b.n	80033c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01f      	beq.n	8003410 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	e012      	b.n	80033fc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	7819      	ldrb	r1, [r3, #0]
 80033de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	3334      	adds	r3, #52	@ 0x34
 80033e6:	460a      	mov	r2, r1
 80033e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b0f      	cmp	r3, #15
 8003400:	d9e9      	bls.n	80033d6 <prvInitialiseNewTask+0x56>
 8003402:	e000      	b.n	8003406 <prvInitialiseNewTask+0x86>
			{
				break;
 8003404:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800340e:	e003      	b.n	8003418 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341a:	2b06      	cmp	r3, #6
 800341c:	d901      	bls.n	8003422 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800341e:	2306      	movs	r3, #6
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	2200      	movs	r2, #0
 8003432:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fe6c 	bl	8003116 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003440:	3318      	adds	r3, #24
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fe67 	bl	8003116 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800344c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	f1c3 0207 	rsb	r2, r3, #7
 8003454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003456:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800345c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	69b8      	ldr	r0, [r7, #24]
 8003472:	f000 fc2b 	bl	8003ccc <pxPortInitialiseStack>
 8003476:	4602      	mov	r2, r0
 8003478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003486:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003488:	bf00      	nop
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003498:	f000 fd08 	bl	8003eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800349c:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <prvAddNewTaskToReadyList+0xb8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4a29      	ldr	r2, [pc, #164]	@ (8003548 <prvAddNewTaskToReadyList+0xb8>)
 80034a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034a6:	4b29      	ldr	r3, [pc, #164]	@ (800354c <prvAddNewTaskToReadyList+0xbc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ae:	4a27      	ldr	r2, [pc, #156]	@ (800354c <prvAddNewTaskToReadyList+0xbc>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034b4:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <prvAddNewTaskToReadyList+0xb8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d110      	bne.n	80034de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034bc:	f000 fac4 	bl	8003a48 <prvInitialiseTaskLists>
 80034c0:	e00d      	b.n	80034de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034c2:	4b23      	ldr	r3, [pc, #140]	@ (8003550 <prvAddNewTaskToReadyList+0xc0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ca:	4b20      	ldr	r3, [pc, #128]	@ (800354c <prvAddNewTaskToReadyList+0xbc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d802      	bhi.n	80034de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034d8:	4a1c      	ldr	r2, [pc, #112]	@ (800354c <prvAddNewTaskToReadyList+0xbc>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034de:	4b1d      	ldr	r3, [pc, #116]	@ (8003554 <prvAddNewTaskToReadyList+0xc4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003554 <prvAddNewTaskToReadyList+0xc4>)
 80034e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	2201      	movs	r2, #1
 80034ee:	409a      	lsls	r2, r3
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <prvAddNewTaskToReadyList+0xc8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	4a18      	ldr	r2, [pc, #96]	@ (8003558 <prvAddNewTaskToReadyList+0xc8>)
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4a15      	ldr	r2, [pc, #84]	@ (800355c <prvAddNewTaskToReadyList+0xcc>)
 8003508:	441a      	add	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f7ff fe0c 	bl	800312e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003516:	f000 fcf9 	bl	8003f0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800351a:	4b0d      	ldr	r3, [pc, #52]	@ (8003550 <prvAddNewTaskToReadyList+0xc0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003522:	4b0a      	ldr	r3, [pc, #40]	@ (800354c <prvAddNewTaskToReadyList+0xbc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800352c:	429a      	cmp	r2, r3
 800352e:	d207      	bcs.n	8003540 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003530:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <prvAddNewTaskToReadyList+0xd0>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000618 	.word	0x20000618
 800354c:	20000518 	.word	0x20000518
 8003550:	20000624 	.word	0x20000624
 8003554:	20000634 	.word	0x20000634
 8003558:	20000620 	.word	0x20000620
 800355c:	2000051c 	.word	0x2000051c
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003576:	4b14      	ldr	r3, [pc, #80]	@ (80035c8 <vTaskDelay+0x64>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <vTaskDelay+0x32>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	60bb      	str	r3, [r7, #8]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003596:	f000 f87d 	bl	8003694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800359a:	2100      	movs	r1, #0
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb2f 	bl	8003c00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035a2:	f000 f885 	bl	80036b0 <xTaskResumeAll>
 80035a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80035ae:	4b07      	ldr	r3, [pc, #28]	@ (80035cc <vTaskDelay+0x68>)
 80035b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000640 	.word	0x20000640
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	@ 0x28
 80035d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035de:	463a      	mov	r2, r7
 80035e0:	1d39      	adds	r1, r7, #4
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fc fe2c 	bl	8000244 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	9202      	str	r2, [sp, #8]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	460a      	mov	r2, r1
 80035fe:	491f      	ldr	r1, [pc, #124]	@ (800367c <vTaskStartScheduler+0xac>)
 8003600:	481f      	ldr	r0, [pc, #124]	@ (8003680 <vTaskStartScheduler+0xb0>)
 8003602:	f7ff fe18 	bl	8003236 <xTaskCreateStatic>
 8003606:	4603      	mov	r3, r0
 8003608:	4a1e      	ldr	r2, [pc, #120]	@ (8003684 <vTaskStartScheduler+0xb4>)
 800360a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800360c:	4b1d      	ldr	r3, [pc, #116]	@ (8003684 <vTaskStartScheduler+0xb4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e001      	b.n	800361e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d116      	bne.n	8003652 <vTaskStartScheduler+0x82>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613b      	str	r3, [r7, #16]
}
 8003636:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003638:	4b13      	ldr	r3, [pc, #76]	@ (8003688 <vTaskStartScheduler+0xb8>)
 800363a:	f04f 32ff 	mov.w	r2, #4294967295
 800363e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003640:	4b12      	ldr	r3, [pc, #72]	@ (800368c <vTaskStartScheduler+0xbc>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003646:	4b12      	ldr	r3, [pc, #72]	@ (8003690 <vTaskStartScheduler+0xc0>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800364c:	f000 fbbc 	bl	8003dc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003650:	e00f      	b.n	8003672 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d10b      	bne.n	8003672 <vTaskStartScheduler+0xa2>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60fb      	str	r3, [r7, #12]
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	e7fd      	b.n	800366e <vTaskStartScheduler+0x9e>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	08004524 	.word	0x08004524
 8003680:	08003a19 	.word	0x08003a19
 8003684:	2000063c 	.word	0x2000063c
 8003688:	20000638 	.word	0x20000638
 800368c:	20000624 	.word	0x20000624
 8003690:	2000061c 	.word	0x2000061c

08003694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <vTaskSuspendAll+0x18>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	4a03      	ldr	r2, [pc, #12]	@ (80036ac <vTaskSuspendAll+0x18>)
 80036a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000640 	.word	0x20000640

080036b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036be:	4b42      	ldr	r3, [pc, #264]	@ (80037c8 <xTaskResumeAll+0x118>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <xTaskResumeAll+0x2e>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	603b      	str	r3, [r7, #0]
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036de:	f000 fbe5 	bl	8003eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036e2:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <xTaskResumeAll+0x118>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	4a37      	ldr	r2, [pc, #220]	@ (80037c8 <xTaskResumeAll+0x118>)
 80036ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ec:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <xTaskResumeAll+0x118>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d161      	bne.n	80037b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036f4:	4b35      	ldr	r3, [pc, #212]	@ (80037cc <xTaskResumeAll+0x11c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d05d      	beq.n	80037b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036fc:	e02e      	b.n	800375c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036fe:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <xTaskResumeAll+0x120>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3318      	adds	r3, #24
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fd6a 	bl	80031e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3304      	adds	r3, #4
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff fd65 	bl	80031e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371e:	2201      	movs	r2, #1
 8003720:	409a      	lsls	r2, r3
 8003722:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <xTaskResumeAll+0x124>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	4a2a      	ldr	r2, [pc, #168]	@ (80037d4 <xTaskResumeAll+0x124>)
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4a27      	ldr	r2, [pc, #156]	@ (80037d8 <xTaskResumeAll+0x128>)
 800373a:	441a      	add	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f7ff fcf3 	bl	800312e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374c:	4b23      	ldr	r3, [pc, #140]	@ (80037dc <xTaskResumeAll+0x12c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	429a      	cmp	r2, r3
 8003754:	d302      	bcc.n	800375c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003756:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <xTaskResumeAll+0x130>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800375c:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <xTaskResumeAll+0x120>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1cc      	bne.n	80036fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800376a:	f000 fa0b 	bl	8003b84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800376e:	4b1d      	ldr	r3, [pc, #116]	@ (80037e4 <xTaskResumeAll+0x134>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d010      	beq.n	800379c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800377a:	f000 f837 	bl	80037ec <xTaskIncrementTick>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003784:	4b16      	ldr	r3, [pc, #88]	@ (80037e0 <xTaskResumeAll+0x130>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3b01      	subs	r3, #1
 800378e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1f1      	bne.n	800377a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003796:	4b13      	ldr	r3, [pc, #76]	@ (80037e4 <xTaskResumeAll+0x134>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800379c:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <xTaskResumeAll+0x130>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037a8:	4b0f      	ldr	r3, [pc, #60]	@ (80037e8 <xTaskResumeAll+0x138>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037b8:	f000 fba8 	bl	8003f0c <vPortExitCritical>

	return xAlreadyYielded;
 80037bc:	68bb      	ldr	r3, [r7, #8]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000640 	.word	0x20000640
 80037cc:	20000618 	.word	0x20000618
 80037d0:	200005d8 	.word	0x200005d8
 80037d4:	20000620 	.word	0x20000620
 80037d8:	2000051c 	.word	0x2000051c
 80037dc:	20000518 	.word	0x20000518
 80037e0:	2000062c 	.word	0x2000062c
 80037e4:	20000628 	.word	0x20000628
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003934 <xTaskIncrementTick+0x148>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 808f 	bne.w	800391e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003800:	4b4d      	ldr	r3, [pc, #308]	@ (8003938 <xTaskIncrementTick+0x14c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003808:	4a4b      	ldr	r2, [pc, #300]	@ (8003938 <xTaskIncrementTick+0x14c>)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d121      	bne.n	8003858 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003814:	4b49      	ldr	r3, [pc, #292]	@ (800393c <xTaskIncrementTick+0x150>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <xTaskIncrementTick+0x4a>
	__asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	603b      	str	r3, [r7, #0]
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	e7fd      	b.n	8003832 <xTaskIncrementTick+0x46>
 8003836:	4b41      	ldr	r3, [pc, #260]	@ (800393c <xTaskIncrementTick+0x150>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	4b40      	ldr	r3, [pc, #256]	@ (8003940 <xTaskIncrementTick+0x154>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3e      	ldr	r2, [pc, #248]	@ (800393c <xTaskIncrementTick+0x150>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4a3e      	ldr	r2, [pc, #248]	@ (8003940 <xTaskIncrementTick+0x154>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	4b3e      	ldr	r3, [pc, #248]	@ (8003944 <xTaskIncrementTick+0x158>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	4a3c      	ldr	r2, [pc, #240]	@ (8003944 <xTaskIncrementTick+0x158>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	f000 f996 	bl	8003b84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003858:	4b3b      	ldr	r3, [pc, #236]	@ (8003948 <xTaskIncrementTick+0x15c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	429a      	cmp	r2, r3
 8003860:	d348      	bcc.n	80038f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003862:	4b36      	ldr	r3, [pc, #216]	@ (800393c <xTaskIncrementTick+0x150>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800386c:	4b36      	ldr	r3, [pc, #216]	@ (8003948 <xTaskIncrementTick+0x15c>)
 800386e:	f04f 32ff 	mov.w	r2, #4294967295
 8003872:	601a      	str	r2, [r3, #0]
					break;
 8003874:	e03e      	b.n	80038f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003876:	4b31      	ldr	r3, [pc, #196]	@ (800393c <xTaskIncrementTick+0x150>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d203      	bcs.n	8003896 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800388e:	4a2e      	ldr	r2, [pc, #184]	@ (8003948 <xTaskIncrementTick+0x15c>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003894:	e02e      	b.n	80038f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	3304      	adds	r3, #4
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fca2 	bl	80031e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3318      	adds	r3, #24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fc99 	bl	80031e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b6:	2201      	movs	r2, #1
 80038b8:	409a      	lsls	r2, r3
 80038ba:	4b24      	ldr	r3, [pc, #144]	@ (800394c <xTaskIncrementTick+0x160>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	4a22      	ldr	r2, [pc, #136]	@ (800394c <xTaskIncrementTick+0x160>)
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003950 <xTaskIncrementTick+0x164>)
 80038d2:	441a      	add	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7ff fc27 	bl	800312e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <xTaskIncrementTick+0x168>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d3b9      	bcc.n	8003862 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80038ee:	2301      	movs	r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f2:	e7b6      	b.n	8003862 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038f4:	4b17      	ldr	r3, [pc, #92]	@ (8003954 <xTaskIncrementTick+0x168>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fa:	4915      	ldr	r1, [pc, #84]	@ (8003950 <xTaskIncrementTick+0x164>)
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d901      	bls.n	8003910 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800390c:	2301      	movs	r3, #1
 800390e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003910:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <xTaskIncrementTick+0x16c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d007      	beq.n	8003928 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003918:	2301      	movs	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
 800391c:	e004      	b.n	8003928 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800391e:	4b0f      	ldr	r3, [pc, #60]	@ (800395c <xTaskIncrementTick+0x170>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	4a0d      	ldr	r2, [pc, #52]	@ (800395c <xTaskIncrementTick+0x170>)
 8003926:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003928:	697b      	ldr	r3, [r7, #20]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000640 	.word	0x20000640
 8003938:	2000061c 	.word	0x2000061c
 800393c:	200005d0 	.word	0x200005d0
 8003940:	200005d4 	.word	0x200005d4
 8003944:	20000630 	.word	0x20000630
 8003948:	20000638 	.word	0x20000638
 800394c:	20000620 	.word	0x20000620
 8003950:	2000051c 	.word	0x2000051c
 8003954:	20000518 	.word	0x20000518
 8003958:	2000062c 	.word	0x2000062c
 800395c:	20000628 	.word	0x20000628

08003960 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003966:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <vTaskSwitchContext+0xa4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800396e:	4b26      	ldr	r3, [pc, #152]	@ (8003a08 <vTaskSwitchContext+0xa8>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003974:	e040      	b.n	80039f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003976:	4b24      	ldr	r3, [pc, #144]	@ (8003a08 <vTaskSwitchContext+0xa8>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800397c:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <vTaskSwitchContext+0xac>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	fab3 f383 	clz	r3, r3
 8003988:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800398a:	7afb      	ldrb	r3, [r7, #11]
 800398c:	f1c3 031f 	rsb	r3, r3, #31
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	491f      	ldr	r1, [pc, #124]	@ (8003a10 <vTaskSwitchContext+0xb0>)
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <vTaskSwitchContext+0x5e>
	__asm volatile
 80039a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	607b      	str	r3, [r7, #4]
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	e7fd      	b.n	80039ba <vTaskSwitchContext+0x5a>
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4a11      	ldr	r2, [pc, #68]	@ (8003a10 <vTaskSwitchContext+0xb0>)
 80039ca:	4413      	add	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3308      	adds	r3, #8
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d104      	bne.n	80039ee <vTaskSwitchContext+0x8e>
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	4a07      	ldr	r2, [pc, #28]	@ (8003a14 <vTaskSwitchContext+0xb4>)
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000640 	.word	0x20000640
 8003a08:	2000062c 	.word	0x2000062c
 8003a0c:	20000620 	.word	0x20000620
 8003a10:	2000051c 	.word	0x2000051c
 8003a14:	20000518 	.word	0x20000518

08003a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a20:	f000 f852 	bl	8003ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a24:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <prvIdleTask+0x28>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d9f9      	bls.n	8003a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <prvIdleTask+0x2c>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a3c:	e7f0      	b.n	8003a20 <prvIdleTask+0x8>
 8003a3e:	bf00      	nop
 8003a40:	2000051c 	.word	0x2000051c
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a4e:	2300      	movs	r3, #0
 8003a50:	607b      	str	r3, [r7, #4]
 8003a52:	e00c      	b.n	8003a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4a12      	ldr	r2, [pc, #72]	@ (8003aa8 <prvInitialiseTaskLists+0x60>)
 8003a60:	4413      	add	r3, r2
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fb38 	bl	80030d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b06      	cmp	r3, #6
 8003a72:	d9ef      	bls.n	8003a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a74:	480d      	ldr	r0, [pc, #52]	@ (8003aac <prvInitialiseTaskLists+0x64>)
 8003a76:	f7ff fb2f 	bl	80030d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a7a:	480d      	ldr	r0, [pc, #52]	@ (8003ab0 <prvInitialiseTaskLists+0x68>)
 8003a7c:	f7ff fb2c 	bl	80030d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a80:	480c      	ldr	r0, [pc, #48]	@ (8003ab4 <prvInitialiseTaskLists+0x6c>)
 8003a82:	f7ff fb29 	bl	80030d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a86:	480c      	ldr	r0, [pc, #48]	@ (8003ab8 <prvInitialiseTaskLists+0x70>)
 8003a88:	f7ff fb26 	bl	80030d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a8c:	480b      	ldr	r0, [pc, #44]	@ (8003abc <prvInitialiseTaskLists+0x74>)
 8003a8e:	f7ff fb23 	bl	80030d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <prvInitialiseTaskLists+0x78>)
 8003a94:	4a05      	ldr	r2, [pc, #20]	@ (8003aac <prvInitialiseTaskLists+0x64>)
 8003a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a98:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac4 <prvInitialiseTaskLists+0x7c>)
 8003a9a:	4a05      	ldr	r2, [pc, #20]	@ (8003ab0 <prvInitialiseTaskLists+0x68>)
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000051c 	.word	0x2000051c
 8003aac:	200005a8 	.word	0x200005a8
 8003ab0:	200005bc 	.word	0x200005bc
 8003ab4:	200005d8 	.word	0x200005d8
 8003ab8:	200005ec 	.word	0x200005ec
 8003abc:	20000604 	.word	0x20000604
 8003ac0:	200005d0 	.word	0x200005d0
 8003ac4:	200005d4 	.word	0x200005d4

08003ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ace:	e019      	b.n	8003b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ad0:	f000 f9ec 	bl	8003eac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad4:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <prvCheckTasksWaitingTermination+0x50>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fb7f 	bl	80031e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b1c <prvCheckTasksWaitingTermination+0x54>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	4a0b      	ldr	r2, [pc, #44]	@ (8003b1c <prvCheckTasksWaitingTermination+0x54>)
 8003aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <prvCheckTasksWaitingTermination+0x58>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <prvCheckTasksWaitingTermination+0x58>)
 8003af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003afa:	f000 fa07 	bl	8003f0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f810 	bl	8003b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b04:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <prvCheckTasksWaitingTermination+0x58>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e1      	bne.n	8003ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200005ec 	.word	0x200005ec
 8003b1c:	20000618 	.word	0x20000618
 8003b20:	20000600 	.word	0x20000600

08003b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fb46 	bl	80041cc <vPortFree>
				vPortFree( pxTCB );
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fb43 	bl	80041cc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b46:	e019      	b.n	8003b7c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d103      	bne.n	8003b5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb3a 	bl	80041cc <vPortFree>
	}
 8003b58:	e010      	b.n	8003b7c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d00b      	beq.n	8003b7c <prvDeleteTCB+0x58>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60fb      	str	r3, [r7, #12]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <prvDeleteTCB+0x54>
	}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <prvResetNextTaskUnblockTime+0x38>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d104      	bne.n	8003b9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003b96:	f04f 32ff 	mov.w	r2, #4294967295
 8003b9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b9c:	e008      	b.n	8003bb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <prvResetNextTaskUnblockTime+0x38>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a04      	ldr	r2, [pc, #16]	@ (8003bc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	200005d0 	.word	0x200005d0
 8003bc0:	20000638 	.word	0x20000638

08003bc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <xTaskGetSchedulerState+0x34>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	607b      	str	r3, [r7, #4]
 8003bd6:	e008      	b.n	8003bea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd8:	4b08      	ldr	r3, [pc, #32]	@ (8003bfc <xTaskGetSchedulerState+0x38>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003be0:	2302      	movs	r3, #2
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	e001      	b.n	8003bea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003be6:	2300      	movs	r3, #0
 8003be8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bea:	687b      	ldr	r3, [r7, #4]
	}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	20000624 	.word	0x20000624
 8003bfc:	20000640 	.word	0x20000640

08003c00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c10:	4b28      	ldr	r3, [pc, #160]	@ (8003cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff fae4 	bl	80031e4 <uxListRemove>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c22:	4b24      	ldr	r3, [pc, #144]	@ (8003cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	2201      	movs	r2, #1
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	4b21      	ldr	r3, [pc, #132]	@ (8003cb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4013      	ands	r3, r2
 8003c36:	4a20      	ldr	r2, [pc, #128]	@ (8003cb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d10a      	bne.n	8003c58 <prvAddCurrentTaskToDelayedList+0x58>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c48:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	4619      	mov	r1, r3
 8003c50:	481a      	ldr	r0, [pc, #104]	@ (8003cbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c52:	f7ff fa6c 	bl	800312e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c56:	e026      	b.n	8003ca6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c60:	4b14      	ldr	r3, [pc, #80]	@ (8003cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d209      	bcs.n	8003c84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c70:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f7ff fa79 	bl	8003174 <vListInsert>
}
 8003c82:	e010      	b.n	8003ca6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c84:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f7ff fa6f 	bl	8003174 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c96:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d202      	bcs.n	8003ca6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ca0:	4a09      	ldr	r2, [pc, #36]	@ (8003cc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6013      	str	r3, [r2, #0]
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	2000061c 	.word	0x2000061c
 8003cb4:	20000518 	.word	0x20000518
 8003cb8:	20000620 	.word	0x20000620
 8003cbc:	20000604 	.word	0x20000604
 8003cc0:	200005d4 	.word	0x200005d4
 8003cc4:	200005d0 	.word	0x200005d0
 8003cc8:	20000638 	.word	0x20000638

08003ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3b04      	subs	r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f023 0201 	bic.w	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3b04      	subs	r3, #4
 8003cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cfc:	4a08      	ldr	r2, [pc, #32]	@ (8003d20 <pxPortInitialiseStack+0x54>)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3b14      	subs	r3, #20
 8003d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3b20      	subs	r3, #32
 8003d12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d14:	68fb      	ldr	r3, [r7, #12]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr
 8003d20:	08003d25 	.word	0x08003d25

08003d24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d2e:	4b12      	ldr	r3, [pc, #72]	@ (8003d78 <prvTaskExitError+0x54>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d36:	d00b      	beq.n	8003d50 <prvTaskExitError+0x2c>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60fb      	str	r3, [r7, #12]
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <prvTaskExitError+0x28>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	60bb      	str	r3, [r7, #8]
}
 8003d62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d64:	bf00      	nop
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0fc      	beq.n	8003d66 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr
 8003d78:	2000000c 	.word	0x2000000c
 8003d7c:	00000000 	.word	0x00000000

08003d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d80:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <pxCurrentTCBConst2>)
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	6808      	ldr	r0, [r1, #0]
 8003d86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d8a:	f380 8809 	msr	PSP, r0
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f380 8811 	msr	BASEPRI, r0
 8003d9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003d9e:	4770      	bx	lr

08003da0 <pxCurrentTCBConst2>:
 8003da0:	20000518 	.word	0x20000518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003da8:	4806      	ldr	r0, [pc, #24]	@ (8003dc4 <prvPortStartFirstTask+0x1c>)
 8003daa:	6800      	ldr	r0, [r0, #0]
 8003dac:	6800      	ldr	r0, [r0, #0]
 8003dae:	f380 8808 	msr	MSP, r0
 8003db2:	b662      	cpsie	i
 8003db4:	b661      	cpsie	f
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	df00      	svc	0
 8003dc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dc2:	bf00      	nop
 8003dc4:	e000ed08 	.word	0xe000ed08

08003dc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dce:	4b32      	ldr	r3, [pc, #200]	@ (8003e98 <xPortStartScheduler+0xd0>)
 8003dd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	22ff      	movs	r2, #255	@ 0xff
 8003dde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e9c <xPortStartScheduler+0xd4>)
 8003df4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003df6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003df8:	2207      	movs	r2, #7
 8003dfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dfc:	e009      	b.n	8003e12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003dfe:	4b28      	ldr	r3, [pc, #160]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4a26      	ldr	r2, [pc, #152]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003e06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1a:	2b80      	cmp	r3, #128	@ 0x80
 8003e1c:	d0ef      	beq.n	8003dfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1c3 0307 	rsb	r3, r3, #7
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d00b      	beq.n	8003e42 <xPortStartScheduler+0x7a>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60bb      	str	r3, [r7, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e42:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	4a15      	ldr	r2, [pc, #84]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003e4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e54:	4a12      	ldr	r2, [pc, #72]	@ (8003ea0 <xPortStartScheduler+0xd8>)
 8003e56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e60:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <xPortStartScheduler+0xdc>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea4 <xPortStartScheduler+0xdc>)
 8003e66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <xPortStartScheduler+0xdc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea4 <xPortStartScheduler+0xdc>)
 8003e72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e78:	f000 f8b8 	bl	8003fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <xPortStartScheduler+0xe0>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e82:	f7ff ff91 	bl	8003da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e86:	f7ff fd6b 	bl	8003960 <vTaskSwitchContext>
	prvTaskExitError();
 8003e8a:	f7ff ff4b 	bl	8003d24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	e000e400 	.word	0xe000e400
 8003e9c:	20000644 	.word	0x20000644
 8003ea0:	20000648 	.word	0x20000648
 8003ea4:	e000ed20 	.word	0xe000ed20
 8003ea8:	2000000c 	.word	0x2000000c

08003eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	607b      	str	r3, [r7, #4]
}
 8003ec4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8003f04 <vPortEnterCritical+0x58>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f04 <vPortEnterCritical+0x58>)
 8003ece:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <vPortEnterCritical+0x58>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d110      	bne.n	8003efa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <vPortEnterCritical+0x5c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <vPortEnterCritical+0x4e>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	603b      	str	r3, [r7, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop
 8003ef8:	e7fd      	b.n	8003ef6 <vPortEnterCritical+0x4a>
	}
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	2000000c 	.word	0x2000000c
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f12:	4b12      	ldr	r3, [pc, #72]	@ (8003f5c <vPortExitCritical+0x50>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <vPortExitCritical+0x26>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	607b      	str	r3, [r7, #4]
}
 8003f2c:	bf00      	nop
 8003f2e:	bf00      	nop
 8003f30:	e7fd      	b.n	8003f2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f32:	4b0a      	ldr	r3, [pc, #40]	@ (8003f5c <vPortExitCritical+0x50>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3b01      	subs	r3, #1
 8003f38:	4a08      	ldr	r2, [pc, #32]	@ (8003f5c <vPortExitCritical+0x50>)
 8003f3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f3c:	4b07      	ldr	r3, [pc, #28]	@ (8003f5c <vPortExitCritical+0x50>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <vPortExitCritical+0x44>
 8003f44:	2300      	movs	r3, #0
 8003f46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	2000000c 	.word	0x2000000c

08003f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f60:	f3ef 8009 	mrs	r0, PSP
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <pxCurrentTCBConst>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f70:	6010      	str	r0, [r2, #0]
 8003f72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003f76:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003f7a:	f380 8811 	msr	BASEPRI, r0
 8003f7e:	f7ff fcef 	bl	8003960 <vTaskSwitchContext>
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f380 8811 	msr	BASEPRI, r0
 8003f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f96:	f380 8809 	msr	PSP, r0
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	4770      	bx	lr

08003fa0 <pxCurrentTCBConst>:
 8003fa0:	20000518 	.word	0x20000518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop

08003fa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	607b      	str	r3, [r7, #4]
}
 8003fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fc2:	f7ff fc13 	bl	80037ec <xTaskIncrementTick>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <xPortSysTickHandler+0x40>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f383 8811 	msr	BASEPRI, r3
}
 8003fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800401c <vPortSetupTimerInterrupt+0x30>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <vPortSetupTimerInterrupt+0x34>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <vPortSetupTimerInterrupt+0x38>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a09      	ldr	r2, [pc, #36]	@ (8004028 <vPortSetupTimerInterrupt+0x3c>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	4a08      	ldr	r2, [pc, #32]	@ (800402c <vPortSetupTimerInterrupt+0x40>)
 800400a:	3b01      	subs	r3, #1
 800400c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800400e:	4b03      	ldr	r3, [pc, #12]	@ (800401c <vPortSetupTimerInterrupt+0x30>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr
 800401c:	e000e010 	.word	0xe000e010
 8004020:	e000e018 	.word	0xe000e018
 8004024:	20000000 	.word	0x20000000
 8004028:	10624dd3 	.word	0x10624dd3
 800402c:	e000e014 	.word	0xe000e014

08004030 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	@ 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800403c:	f7ff fb2a 	bl	8003694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004040:	4b5c      	ldr	r3, [pc, #368]	@ (80041b4 <pvPortMalloc+0x184>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004048:	f000 f924 	bl	8004294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800404c:	4b5a      	ldr	r3, [pc, #360]	@ (80041b8 <pvPortMalloc+0x188>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	f040 8095 	bne.w	8004184 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01e      	beq.n	800409e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004060:	2208      	movs	r2, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	2b00      	cmp	r3, #0
 8004070:	d015      	beq.n	800409e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f023 0307 	bic.w	r3, r3, #7
 8004078:	3308      	adds	r3, #8
 800407a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <pvPortMalloc+0x6e>
	__asm volatile
 8004086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408a:	f383 8811 	msr	BASEPRI, r3
 800408e:	f3bf 8f6f 	isb	sy
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	617b      	str	r3, [r7, #20]
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	e7fd      	b.n	800409a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d06f      	beq.n	8004184 <pvPortMalloc+0x154>
 80040a4:	4b45      	ldr	r3, [pc, #276]	@ (80041bc <pvPortMalloc+0x18c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d86a      	bhi.n	8004184 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80040ae:	4b44      	ldr	r3, [pc, #272]	@ (80041c0 <pvPortMalloc+0x190>)
 80040b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80040b2:	4b43      	ldr	r3, [pc, #268]	@ (80041c0 <pvPortMalloc+0x190>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040b8:	e004      	b.n	80040c4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d903      	bls.n	80040d6 <pvPortMalloc+0xa6>
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f1      	bne.n	80040ba <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80040d6:	4b37      	ldr	r3, [pc, #220]	@ (80041b4 <pvPortMalloc+0x184>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040dc:	429a      	cmp	r2, r3
 80040de:	d051      	beq.n	8004184 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2208      	movs	r2, #8
 80040e6:	4413      	add	r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	1ad2      	subs	r2, r2, r3
 80040fa:	2308      	movs	r3, #8
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	429a      	cmp	r2, r3
 8004100:	d920      	bls.n	8004144 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4413      	add	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <pvPortMalloc+0xfc>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	613b      	str	r3, [r7, #16]
}
 8004126:	bf00      	nop
 8004128:	bf00      	nop
 800412a:	e7fd      	b.n	8004128 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800412c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800413e:	69b8      	ldr	r0, [r7, #24]
 8004140:	f000 f90a 	bl	8004358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004144:	4b1d      	ldr	r3, [pc, #116]	@ (80041bc <pvPortMalloc+0x18c>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	4a1b      	ldr	r2, [pc, #108]	@ (80041bc <pvPortMalloc+0x18c>)
 8004150:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004152:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <pvPortMalloc+0x18c>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <pvPortMalloc+0x194>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d203      	bcs.n	8004166 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800415e:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <pvPortMalloc+0x18c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <pvPortMalloc+0x194>)
 8004164:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4b13      	ldr	r3, [pc, #76]	@ (80041b8 <pvPortMalloc+0x188>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	431a      	orrs	r2, r3
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800417a:	4b13      	ldr	r3, [pc, #76]	@ (80041c8 <pvPortMalloc+0x198>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a11      	ldr	r2, [pc, #68]	@ (80041c8 <pvPortMalloc+0x198>)
 8004182:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004184:	f7ff fa94 	bl	80036b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <pvPortMalloc+0x17a>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	60fb      	str	r3, [r7, #12]
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <pvPortMalloc+0x176>
	return pvReturn;
 80041aa:	69fb      	ldr	r3, [r7, #28]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3728      	adds	r7, #40	@ 0x28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20001254 	.word	0x20001254
 80041b8:	20001268 	.word	0x20001268
 80041bc:	20001258 	.word	0x20001258
 80041c0:	2000124c 	.word	0x2000124c
 80041c4:	2000125c 	.word	0x2000125c
 80041c8:	20001260 	.word	0x20001260

080041cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d04f      	beq.n	800427e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80041de:	2308      	movs	r3, #8
 80041e0:	425b      	negs	r3, r3
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4413      	add	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	4b25      	ldr	r3, [pc, #148]	@ (8004288 <vPortFree+0xbc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <vPortFree+0x46>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60fb      	str	r3, [r7, #12]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <vPortFree+0x66>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60bb      	str	r3, [r7, #8]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	4b14      	ldr	r3, [pc, #80]	@ (8004288 <vPortFree+0xbc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01e      	beq.n	800427e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11a      	bne.n	800427e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <vPortFree+0xbc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004258:	f7ff fa1c 	bl	8003694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <vPortFree+0xc0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4413      	add	r3, r2
 8004266:	4a09      	ldr	r2, [pc, #36]	@ (800428c <vPortFree+0xc0>)
 8004268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800426a:	6938      	ldr	r0, [r7, #16]
 800426c:	f000 f874 	bl	8004358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <vPortFree+0xc4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	4a06      	ldr	r2, [pc, #24]	@ (8004290 <vPortFree+0xc4>)
 8004278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800427a:	f7ff fa19 	bl	80036b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800427e:	bf00      	nop
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20001268 	.word	0x20001268
 800428c:	20001258 	.word	0x20001258
 8004290:	20001264 	.word	0x20001264

08004294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800429a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800429e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80042a0:	4b27      	ldr	r3, [pc, #156]	@ (8004340 <prvHeapInit+0xac>)
 80042a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	3307      	adds	r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004340 <prvHeapInit+0xac>)
 80042c4:	4413      	add	r3, r2
 80042c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004344 <prvHeapInit+0xb0>)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004344 <prvHeapInit+0xb0>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	4413      	add	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80042e0:	2208      	movs	r2, #8
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0307 	bic.w	r3, r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a15      	ldr	r2, [pc, #84]	@ (8004348 <prvHeapInit+0xb4>)
 80042f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80042f6:	4b14      	ldr	r3, [pc, #80]	@ (8004348 <prvHeapInit+0xb4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80042fe:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <prvHeapInit+0xb4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	1ad2      	subs	r2, r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004314:	4b0c      	ldr	r3, [pc, #48]	@ (8004348 <prvHeapInit+0xb4>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a0a      	ldr	r2, [pc, #40]	@ (800434c <prvHeapInit+0xb8>)
 8004322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <prvHeapInit+0xbc>)
 800432a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <prvHeapInit+0xc0>)
 800432e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004332:	601a      	str	r2, [r3, #0]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	2000064c 	.word	0x2000064c
 8004344:	2000124c 	.word	0x2000124c
 8004348:	20001254 	.word	0x20001254
 800434c:	2000125c 	.word	0x2000125c
 8004350:	20001258 	.word	0x20001258
 8004354:	20001268 	.word	0x20001268

08004358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <prvInsertBlockIntoFreeList+0xa8>)
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e002      	b.n	800436c <prvInsertBlockIntoFreeList+0x14>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d8f7      	bhi.n	8004366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4413      	add	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d108      	bne.n	800439a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	441a      	add	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d118      	bne.n	80043e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b14      	ldr	r3, [pc, #80]	@ (8004404 <prvInsertBlockIntoFreeList+0xac>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d00d      	beq.n	80043d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	441a      	add	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	e008      	b.n	80043e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80043d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <prvInsertBlockIntoFreeList+0xac>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	e003      	b.n	80043e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d002      	beq.n	80043f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	2000124c 	.word	0x2000124c
 8004404:	20001254 	.word	0x20001254

08004408 <memset>:
 8004408:	4603      	mov	r3, r0
 800440a:	4402      	add	r2, r0
 800440c:	4293      	cmp	r3, r2
 800440e:	d100      	bne.n	8004412 <memset+0xa>
 8004410:	4770      	bx	lr
 8004412:	f803 1b01 	strb.w	r1, [r3], #1
 8004416:	e7f9      	b.n	800440c <memset+0x4>

08004418 <__libc_init_array>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	2600      	movs	r6, #0
 800441c:	4d0c      	ldr	r5, [pc, #48]	@ (8004450 <__libc_init_array+0x38>)
 800441e:	4c0d      	ldr	r4, [pc, #52]	@ (8004454 <__libc_init_array+0x3c>)
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	42a6      	cmp	r6, r4
 8004426:	d109      	bne.n	800443c <__libc_init_array+0x24>
 8004428:	f000 f81a 	bl	8004460 <_init>
 800442c:	2600      	movs	r6, #0
 800442e:	4d0a      	ldr	r5, [pc, #40]	@ (8004458 <__libc_init_array+0x40>)
 8004430:	4c0a      	ldr	r4, [pc, #40]	@ (800445c <__libc_init_array+0x44>)
 8004432:	1b64      	subs	r4, r4, r5
 8004434:	10a4      	asrs	r4, r4, #2
 8004436:	42a6      	cmp	r6, r4
 8004438:	d105      	bne.n	8004446 <__libc_init_array+0x2e>
 800443a:	bd70      	pop	{r4, r5, r6, pc}
 800443c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004440:	4798      	blx	r3
 8004442:	3601      	adds	r6, #1
 8004444:	e7ee      	b.n	8004424 <__libc_init_array+0xc>
 8004446:	f855 3b04 	ldr.w	r3, [r5], #4
 800444a:	4798      	blx	r3
 800444c:	3601      	adds	r6, #1
 800444e:	e7f2      	b.n	8004436 <__libc_init_array+0x1e>
 8004450:	08004558 	.word	0x08004558
 8004454:	08004558 	.word	0x08004558
 8004458:	08004558 	.word	0x08004558
 800445c:	0800455c 	.word	0x0800455c

08004460 <_init>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	bf00      	nop
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr

0800446c <_fini>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr
